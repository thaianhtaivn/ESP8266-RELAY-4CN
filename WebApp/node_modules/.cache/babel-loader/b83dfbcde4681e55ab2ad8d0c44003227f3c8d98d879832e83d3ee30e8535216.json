{"ast":null,"code":"define([\"./core\", \"./core/toType\", \"./var/isFunction\", \"./var/rnothtmlwhite\"], function (jQuery, toType, isFunction, rnothtmlwhite) {\n  \"use strict\";\n\n  // Convert String-formatted options into Object-formatted ones\n  function createOptions(options) {\n    var object = {};\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * \"fired\" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === \"string\" ? createOptions(options) : jQuery.extend({}, options);\n    var\n      // Flag to know if list is currently firing\n      firing,\n      // Last fire value for non-forgettable lists\n      memory,\n      // Flag to know if list was already fired\n      fired,\n      // Flag to prevent firing\n      locked,\n      // Actual callback list\n      list = [],\n      // Queue of execution data for repeatable lists\n      queue = [],\n      // Index of currently firing callback (modified by add/remove as needed)\n      firingIndex = -1,\n      // Fire callbacks\n      fire = function () {\n        // Enforce single-firing\n        locked = locked || options.once;\n\n        // Execute callbacks for all pending executions,\n        // respecting firingIndex overrides and runtime changes\n        fired = firing = true;\n        for (; queue.length; firingIndex = -1) {\n          memory = queue.shift();\n          while (++firingIndex < list.length) {\n            // Run callback and check for early termination\n            if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n              // Jump to end and forget the data so .add doesn't re-fire\n              firingIndex = list.length;\n              memory = false;\n            }\n          }\n        }\n\n        // Forget the data if we're done with it\n        if (!options.memory) {\n          memory = false;\n        }\n        firing = false;\n\n        // Clean up if we're done firing for good\n        if (locked) {\n          // Keep an empty list if we have data for future add calls\n          if (memory) {\n            list = [];\n\n            // Otherwise, this object is spent\n          } else {\n            list = \"\";\n          }\n        }\n      },\n      // Actual Callbacks object\n      self = {\n        // Add a callback or a collection of callbacks to the list\n        add: function () {\n          if (list) {\n            // If we have memory from a past run, we should fire after adding\n            if (memory && !firing) {\n              firingIndex = list.length - 1;\n              queue.push(memory);\n            }\n            (function add(args) {\n              jQuery.each(args, function (_, arg) {\n                if (isFunction(arg)) {\n                  if (!options.unique || !self.has(arg)) {\n                    list.push(arg);\n                  }\n                } else if (arg && arg.length && toType(arg) !== \"string\") {\n                  // Inspect recursively\n                  add(arg);\n                }\n              });\n            })(arguments);\n            if (memory && !firing) {\n              fire();\n            }\n          }\n          return this;\n        },\n        // Remove a callback from the list\n        remove: function () {\n          jQuery.each(arguments, function (_, arg) {\n            var index;\n            while ((index = jQuery.inArray(arg, list, index)) > -1) {\n              list.splice(index, 1);\n\n              // Handle firing indexes\n              if (index <= firingIndex) {\n                firingIndex--;\n              }\n            }\n          });\n          return this;\n        },\n        // Check if a given callback is in the list.\n        // If no argument is given, return whether or not list has callbacks attached.\n        has: function (fn) {\n          return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n        },\n        // Remove all callbacks from the list\n        empty: function () {\n          if (list) {\n            list = [];\n          }\n          return this;\n        },\n        // Disable .fire and .add\n        // Abort any current/pending executions\n        // Clear all callbacks and values\n        disable: function () {\n          locked = queue = [];\n          list = memory = \"\";\n          return this;\n        },\n        disabled: function () {\n          return !list;\n        },\n        // Disable .fire\n        // Also disable .add unless we have memory (since it would have no effect)\n        // Abort any pending executions\n        lock: function () {\n          locked = queue = [];\n          if (!memory && !firing) {\n            list = memory = \"\";\n          }\n          return this;\n        },\n        locked: function () {\n          return !!locked;\n        },\n        // Call all callbacks with the given context and arguments\n        fireWith: function (context, args) {\n          if (!locked) {\n            args = args || [];\n            args = [context, args.slice ? args.slice() : args];\n            queue.push(args);\n            if (!firing) {\n              fire();\n            }\n          }\n          return this;\n        },\n        // Call all the callbacks with the given arguments\n        fire: function () {\n          self.fireWith(this, arguments);\n          return this;\n        },\n        // To know if the callbacks have already been called at least once\n        fired: function () {\n          return !!fired;\n        }\n      };\n    return self;\n  };\n  return jQuery;\n});","map":{"version":3,"names":["define","jQuery","toType","isFunction","rnothtmlwhite","createOptions","options","object","each","match","_","flag","Callbacks","extend","firing","memory","fired","locked","list","queue","firingIndex","fire","once","length","shift","apply","stopOnFalse","self","add","push","args","arg","unique","has","arguments","remove","index","inArray","splice","fn","empty","disable","disabled","lock","fireWith","context","slice"],"sources":["/Users/thaitai/Desktop/Work/IoT/relay-web-app/node_modules/jquery/src/callbacks.js"],"sourcesContent":["define( [\n\t\"./core\",\n\t\"./core/toType\",\n\t\"./var/isFunction\",\n\t\"./var/rnothtmlwhite\"\n], function( jQuery, toType, isFunction, rnothtmlwhite ) {\n\n\"use strict\";\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\nreturn jQuery;\n} );\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}