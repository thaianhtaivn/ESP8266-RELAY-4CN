{"ast":null,"code":"/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nvar client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  var message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n  if (typeof exports === \"object\" && typeof module === \"object\") {\n    module.exports = factory();\n  } else if (typeof define === \"function\" && define.amd) {\n    define(factory);\n  } else if (typeof exports === \"object\") {\n    exports = factory();\n  } else {\n    //if (typeof root.Paho === \"undefined\"){\n    //\troot.Paho = {};\n    //}\n    root.Paho = factory();\n  }\n})(this, function LibraryFactory() {\n  var PahoMQTT = function (global) {\n    // Private variables below, these are only visible inside the function closure\n    // which is used to define the module.\n    var version = \"@VERSION@-@BUILDLEVEL@\";\n\n    /**\n     * @private\n     */\n    var localStorage = global.localStorage || function () {\n      var data = {};\n      return {\n        setItem: function (key, item) {\n          data[key] = item;\n        },\n        getItem: function (key) {\n          return data[key];\n        },\n        removeItem: function (key) {\n          delete data[key];\n        }\n      };\n    }();\n\n    /**\n    * Unique message type identifiers, with associated\n    * associated integer values.\n    * @private\n    */\n    var MESSAGE_TYPE = {\n      CONNECT: 1,\n      CONNACK: 2,\n      PUBLISH: 3,\n      PUBACK: 4,\n      PUBREC: 5,\n      PUBREL: 6,\n      PUBCOMP: 7,\n      SUBSCRIBE: 8,\n      SUBACK: 9,\n      UNSUBSCRIBE: 10,\n      UNSUBACK: 11,\n      PINGREQ: 12,\n      PINGRESP: 13,\n      DISCONNECT: 14\n    };\n\n    // Collection of utility methods used to simplify module code\n    // and promote the DRY pattern.\n\n    /**\n    * Validate an object's parameter names to ensure they\n    * match a list of expected variables name for this option\n    * type. Used to ensure option object passed into the API don't\n    * contain erroneous parameters.\n    * @param {Object} obj - User options object\n    * @param {Object} keys - valid keys and types that may exist in obj.\n    * @throws {Error} Invalid option parameter found.\n    * @private\n    */\n    var validate = function (obj, keys) {\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          if (keys.hasOwnProperty(key)) {\n            if (typeof obj[key] !== keys[key]) throw new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n          } else {\n            var errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n            for (var validKey in keys) if (keys.hasOwnProperty(validKey)) errorStr = errorStr + \" \" + validKey;\n            throw new Error(errorStr);\n          }\n        }\n      }\n    };\n\n    /**\n    * Return a new function which runs the user function bound\n    * to a fixed scope.\n    * @param {function} User function\n    * @param {object} Function scope\n    * @return {function} User function bound to another scope\n    * @private\n    */\n    var scope = function (f, scope) {\n      return function () {\n        return f.apply(scope, arguments);\n      };\n    };\n\n    /**\n    * Unique message type identifiers, with associated\n    * associated integer values.\n    * @private\n    */\n    var ERROR = {\n      OK: {\n        code: 0,\n        text: \"AMQJSC0000I OK.\"\n      },\n      CONNECT_TIMEOUT: {\n        code: 1,\n        text: \"AMQJSC0001E Connect timed out.\"\n      },\n      SUBSCRIBE_TIMEOUT: {\n        code: 2,\n        text: \"AMQJS0002E Subscribe timed out.\"\n      },\n      UNSUBSCRIBE_TIMEOUT: {\n        code: 3,\n        text: \"AMQJS0003E Unsubscribe timed out.\"\n      },\n      PING_TIMEOUT: {\n        code: 4,\n        text: \"AMQJS0004E Ping timed out.\"\n      },\n      INTERNAL_ERROR: {\n        code: 5,\n        text: \"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"\n      },\n      CONNACK_RETURNCODE: {\n        code: 6,\n        text: \"AMQJS0006E Bad Connack return code:{0} {1}.\"\n      },\n      SOCKET_ERROR: {\n        code: 7,\n        text: \"AMQJS0007E Socket error:{0}.\"\n      },\n      SOCKET_CLOSE: {\n        code: 8,\n        text: \"AMQJS0008I Socket closed.\"\n      },\n      MALFORMED_UTF: {\n        code: 9,\n        text: \"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"\n      },\n      UNSUPPORTED: {\n        code: 10,\n        text: \"AMQJS0010E {0} is not supported by this browser.\"\n      },\n      INVALID_STATE: {\n        code: 11,\n        text: \"AMQJS0011E Invalid state {0}.\"\n      },\n      INVALID_TYPE: {\n        code: 12,\n        text: \"AMQJS0012E Invalid type {0} for {1}.\"\n      },\n      INVALID_ARGUMENT: {\n        code: 13,\n        text: \"AMQJS0013E Invalid argument {0} for {1}.\"\n      },\n      UNSUPPORTED_OPERATION: {\n        code: 14,\n        text: \"AMQJS0014E Unsupported operation.\"\n      },\n      INVALID_STORED_DATA: {\n        code: 15,\n        text: \"AMQJS0015E Invalid data in local storage key={0} value={1}.\"\n      },\n      INVALID_MQTT_MESSAGE_TYPE: {\n        code: 16,\n        text: \"AMQJS0016E Invalid MQTT message type {0}.\"\n      },\n      MALFORMED_UNICODE: {\n        code: 17,\n        text: \"AMQJS0017E Malformed Unicode string:{0} {1}.\"\n      },\n      BUFFER_FULL: {\n        code: 18,\n        text: \"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"\n      }\n    };\n\n    /** CONNACK RC Meaning. */\n    var CONNACK_RC = {\n      0: \"Connection Accepted\",\n      1: \"Connection Refused: unacceptable protocol version\",\n      2: \"Connection Refused: identifier rejected\",\n      3: \"Connection Refused: server unavailable\",\n      4: \"Connection Refused: bad user name or password\",\n      5: \"Connection Refused: not authorized\"\n    };\n\n    /**\n     * Format an error message text.\n     * @private\n     * @param {error} ERROR value above.\n     * @param {substitutions} [array] substituted into the text.\n     * @return the text with the substitutions made.\n     */\n    var format = function (error, substitutions) {\n      var text = error.text;\n      if (substitutions) {\n        var field, start;\n        for (var i = 0; i < substitutions.length; i++) {\n          field = \"{\" + i + \"}\";\n          start = text.indexOf(field);\n          if (start > 0) {\n            var part1 = text.substring(0, start);\n            var part2 = text.substring(start + field.length);\n            text = part1 + substitutions[i] + part2;\n          }\n        }\n      }\n      return text;\n    };\n\n    //MQTT protocol and version          6    M    Q    I    s    d    p    3\n    var MqttProtoIdentifierv3 = [0x00, 0x06, 0x4d, 0x51, 0x49, 0x73, 0x64, 0x70, 0x03];\n    //MQTT proto/version for 311         4    M    Q    T    T    4\n    var MqttProtoIdentifierv4 = [0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04];\n\n    /**\n    * Construct an MQTT wire protocol message.\n    * @param type MQTT packet type.\n    * @param options optional wire message attributes.\n    *\n    * Optional properties\n    *\n    * messageIdentifier: message ID in the range [0..65535]\n    * payloadMessage:\tApplication Message - PUBLISH only\n    * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n    * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n    * requestQoS:\t\tarray of QoS values [0..2]\n    *\n    * \"Flag\" properties\n    * cleanSession:\ttrue if present / false if absent (CONNECT)\n    * willMessage:  \ttrue if present / false if absent (CONNECT)\n    * isRetained:\t\ttrue if present / false if absent (CONNECT)\n    * userName:\t\ttrue if present / false if absent (CONNECT)\n    * password:\t\ttrue if present / false if absent (CONNECT)\n    * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n    *\n    * @private\n    * @ignore\n    */\n    var WireMessage = function (type, options) {\n      this.type = type;\n      for (var name in options) {\n        if (options.hasOwnProperty(name)) {\n          this[name] = options[name];\n        }\n      }\n    };\n    WireMessage.prototype.encode = function () {\n      // Compute the first byte of the fixed header\n      var first = (this.type & 0x0f) << 4;\n\n      /*\n      * Now calculate the length of the variable header + payload by adding up the lengths\n      * of all the component parts\n      */\n\n      var remLength = 0;\n      var topicStrLength = [];\n      var destinationNameLength = 0;\n      var willMessagePayloadBytes;\n\n      // if the message contains a messageIdentifier then we need two bytes for that\n      if (this.messageIdentifier !== undefined) remLength += 2;\n      switch (this.type) {\n        // If this a Connect then we need to include 12 bytes for its header\n        case MESSAGE_TYPE.CONNECT:\n          switch (this.mqttVersion) {\n            case 3:\n              remLength += MqttProtoIdentifierv3.length + 3;\n              break;\n            case 4:\n              remLength += MqttProtoIdentifierv4.length + 3;\n              break;\n          }\n          remLength += UTF8Length(this.clientId) + 2;\n          if (this.willMessage !== undefined) {\n            remLength += UTF8Length(this.willMessage.destinationName) + 2;\n            // Will message is always a string, sent as UTF-8 characters with a preceding length.\n            willMessagePayloadBytes = this.willMessage.payloadBytes;\n            if (!(willMessagePayloadBytes instanceof Uint8Array)) willMessagePayloadBytes = new Uint8Array(payloadBytes);\n            remLength += willMessagePayloadBytes.byteLength + 2;\n          }\n          if (this.userName !== undefined) remLength += UTF8Length(this.userName) + 2;\n          if (this.password !== undefined) remLength += UTF8Length(this.password) + 2;\n          break;\n\n        // Subscribe, Unsubscribe can both contain topic strings\n        case MESSAGE_TYPE.SUBSCRIBE:\n          first |= 0x02; // Qos = 1;\n          for (var i = 0; i < this.topics.length; i++) {\n            topicStrLength[i] = UTF8Length(this.topics[i]);\n            remLength += topicStrLength[i] + 2;\n          }\n          remLength += this.requestedQos.length; // 1 byte for each topic's Qos\n          // QoS on Subscribe only\n          break;\n        case MESSAGE_TYPE.UNSUBSCRIBE:\n          first |= 0x02; // Qos = 1;\n          for (var i = 0; i < this.topics.length; i++) {\n            topicStrLength[i] = UTF8Length(this.topics[i]);\n            remLength += topicStrLength[i] + 2;\n          }\n          break;\n        case MESSAGE_TYPE.PUBREL:\n          first |= 0x02; // Qos = 1;\n          break;\n        case MESSAGE_TYPE.PUBLISH:\n          if (this.payloadMessage.duplicate) first |= 0x08;\n          first = first |= this.payloadMessage.qos << 1;\n          if (this.payloadMessage.retained) first |= 0x01;\n          destinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n          remLength += destinationNameLength + 2;\n          var payloadBytes = this.payloadMessage.payloadBytes;\n          remLength += payloadBytes.byteLength;\n          if (payloadBytes instanceof ArrayBuffer) payloadBytes = new Uint8Array(payloadBytes);else if (!(payloadBytes instanceof Uint8Array)) payloadBytes = new Uint8Array(payloadBytes.buffer);\n          break;\n        case MESSAGE_TYPE.DISCONNECT:\n          break;\n        default:\n          break;\n      }\n\n      // Now we can allocate a buffer for the message\n\n      var mbi = encodeMBI(remLength); // Convert the length to MQTT MBI format\n      var pos = mbi.length + 1; // Offset of start of variable header\n      var buffer = new ArrayBuffer(remLength + pos);\n      var byteStream = new Uint8Array(buffer); // view it as a sequence of bytes\n\n      //Write the fixed header into the buffer\n      byteStream[0] = first;\n      byteStream.set(mbi, 1);\n\n      // If this is a PUBLISH then the variable header starts with a topic\n      if (this.type == MESSAGE_TYPE.PUBLISH) pos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n      // If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n      else if (this.type == MESSAGE_TYPE.CONNECT) {\n        switch (this.mqttVersion) {\n          case 3:\n            byteStream.set(MqttProtoIdentifierv3, pos);\n            pos += MqttProtoIdentifierv3.length;\n            break;\n          case 4:\n            byteStream.set(MqttProtoIdentifierv4, pos);\n            pos += MqttProtoIdentifierv4.length;\n            break;\n        }\n        var connectFlags = 0;\n        if (this.cleanSession) connectFlags = 0x02;\n        if (this.willMessage !== undefined) {\n          connectFlags |= 0x04;\n          connectFlags |= this.willMessage.qos << 3;\n          if (this.willMessage.retained) {\n            connectFlags |= 0x20;\n          }\n        }\n        if (this.userName !== undefined) connectFlags |= 0x80;\n        if (this.password !== undefined) connectFlags |= 0x40;\n        byteStream[pos++] = connectFlags;\n        pos = writeUint16(this.keepAliveInterval, byteStream, pos);\n      }\n\n      // Output the messageIdentifier - if there is one\n      if (this.messageIdentifier !== undefined) pos = writeUint16(this.messageIdentifier, byteStream, pos);\n      switch (this.type) {\n        case MESSAGE_TYPE.CONNECT:\n          pos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n          if (this.willMessage !== undefined) {\n            pos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n            pos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n            byteStream.set(willMessagePayloadBytes, pos);\n            pos += willMessagePayloadBytes.byteLength;\n          }\n          if (this.userName !== undefined) pos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n          if (this.password !== undefined) pos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n          break;\n        case MESSAGE_TYPE.PUBLISH:\n          // PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n          byteStream.set(payloadBytes, pos);\n          break;\n\n        //    \t    case MESSAGE_TYPE.PUBREC:\n        //    \t    case MESSAGE_TYPE.PUBREL:\n        //    \t    case MESSAGE_TYPE.PUBCOMP:\n        //    \t    \tbreak;\n\n        case MESSAGE_TYPE.SUBSCRIBE:\n          // SUBSCRIBE has a list of topic strings and request QoS\n          for (var i = 0; i < this.topics.length; i++) {\n            pos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n            byteStream[pos++] = this.requestedQos[i];\n          }\n          break;\n        case MESSAGE_TYPE.UNSUBSCRIBE:\n          // UNSUBSCRIBE has a list of topic strings\n          for (var i = 0; i < this.topics.length; i++) pos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n          break;\n        default:\n        // Do nothing.\n      }\n\n      return buffer;\n    };\n    function decodeMessage(input, pos) {\n      var startingPos = pos;\n      var first = input[pos];\n      var type = first >> 4;\n      var messageInfo = first &= 0x0f;\n      pos += 1;\n\n      // Decode the remaining length (MBI format)\n\n      var digit;\n      var remLength = 0;\n      var multiplier = 1;\n      do {\n        if (pos == input.length) {\n          return [null, startingPos];\n        }\n        digit = input[pos++];\n        remLength += (digit & 0x7F) * multiplier;\n        multiplier *= 128;\n      } while ((digit & 0x80) !== 0);\n      var endPos = pos + remLength;\n      if (endPos > input.length) {\n        return [null, startingPos];\n      }\n      var wireMessage = new WireMessage(type);\n      switch (type) {\n        case MESSAGE_TYPE.CONNACK:\n          var connectAcknowledgeFlags = input[pos++];\n          if (connectAcknowledgeFlags & 0x01) wireMessage.sessionPresent = true;\n          wireMessage.returnCode = input[pos++];\n          break;\n        case MESSAGE_TYPE.PUBLISH:\n          var qos = messageInfo >> 1 & 0x03;\n          var len = readUint16(input, pos);\n          pos += 2;\n          var topicName = parseUTF8(input, pos, len);\n          pos += len;\n          // If QoS 1 or 2 there will be a messageIdentifier\n          if (qos > 0) {\n            wireMessage.messageIdentifier = readUint16(input, pos);\n            pos += 2;\n          }\n          var message = new Message(input.subarray(pos, endPos));\n          if ((messageInfo & 0x01) == 0x01) message.retained = true;\n          if ((messageInfo & 0x08) == 0x08) message.duplicate = true;\n          message.qos = qos;\n          message.destinationName = topicName;\n          wireMessage.payloadMessage = message;\n          break;\n        case MESSAGE_TYPE.PUBACK:\n        case MESSAGE_TYPE.PUBREC:\n        case MESSAGE_TYPE.PUBREL:\n        case MESSAGE_TYPE.PUBCOMP:\n        case MESSAGE_TYPE.UNSUBACK:\n          wireMessage.messageIdentifier = readUint16(input, pos);\n          break;\n        case MESSAGE_TYPE.SUBACK:\n          wireMessage.messageIdentifier = readUint16(input, pos);\n          pos += 2;\n          wireMessage.returnCode = input.subarray(pos, endPos);\n          break;\n        default:\n          break;\n      }\n      return [wireMessage, endPos];\n    }\n    function writeUint16(input, buffer, offset) {\n      buffer[offset++] = input >> 8; //MSB\n      buffer[offset++] = input % 256; //LSB\n      return offset;\n    }\n    function writeString(input, utf8Length, buffer, offset) {\n      offset = writeUint16(utf8Length, buffer, offset);\n      stringToUTF8(input, buffer, offset);\n      return offset + utf8Length;\n    }\n    function readUint16(buffer, offset) {\n      return 256 * buffer[offset] + buffer[offset + 1];\n    }\n\n    /**\n    * Encodes an MQTT Multi-Byte Integer\n    * @private\n    */\n    function encodeMBI(number) {\n      var output = new Array(1);\n      var numBytes = 0;\n      do {\n        var digit = number % 128;\n        number = number >> 7;\n        if (number > 0) {\n          digit |= 0x80;\n        }\n        output[numBytes++] = digit;\n      } while (number > 0 && numBytes < 4);\n      return output;\n    }\n\n    /**\n    * Takes a String and calculates its length in bytes when encoded in UTF8.\n    * @private\n    */\n    function UTF8Length(input) {\n      var output = 0;\n      for (var i = 0; i < input.length; i++) {\n        var charCode = input.charCodeAt(i);\n        if (charCode > 0x7FF) {\n          // Surrogate pair means its a 4 byte character\n          if (0xD800 <= charCode && charCode <= 0xDBFF) {\n            i++;\n            output++;\n          }\n          output += 3;\n        } else if (charCode > 0x7F) output += 2;else output++;\n      }\n      return output;\n    }\n\n    /**\n    * Takes a String and writes it into an array as UTF8 encoded bytes.\n    * @private\n    */\n    function stringToUTF8(input, output, start) {\n      var pos = start;\n      for (var i = 0; i < input.length; i++) {\n        var charCode = input.charCodeAt(i);\n\n        // Check for a surrogate pair.\n        if (0xD800 <= charCode && charCode <= 0xDBFF) {\n          var lowCharCode = input.charCodeAt(++i);\n          if (isNaN(lowCharCode)) {\n            throw new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n          }\n          charCode = (charCode - 0xD800 << 10) + (lowCharCode - 0xDC00) + 0x10000;\n        }\n        if (charCode <= 0x7F) {\n          output[pos++] = charCode;\n        } else if (charCode <= 0x7FF) {\n          output[pos++] = charCode >> 6 & 0x1F | 0xC0;\n          output[pos++] = charCode & 0x3F | 0x80;\n        } else if (charCode <= 0xFFFF) {\n          output[pos++] = charCode >> 12 & 0x0F | 0xE0;\n          output[pos++] = charCode >> 6 & 0x3F | 0x80;\n          output[pos++] = charCode & 0x3F | 0x80;\n        } else {\n          output[pos++] = charCode >> 18 & 0x07 | 0xF0;\n          output[pos++] = charCode >> 12 & 0x3F | 0x80;\n          output[pos++] = charCode >> 6 & 0x3F | 0x80;\n          output[pos++] = charCode & 0x3F | 0x80;\n        }\n      }\n      return output;\n    }\n    function parseUTF8(input, offset, length) {\n      var output = \"\";\n      var utf16;\n      var pos = offset;\n      while (pos < offset + length) {\n        var byte1 = input[pos++];\n        if (byte1 < 128) utf16 = byte1;else {\n          var byte2 = input[pos++] - 128;\n          if (byte2 < 0) throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), \"\"]));\n          if (byte1 < 0xE0)\n            // 2 byte character\n            utf16 = 64 * (byte1 - 0xC0) + byte2;else {\n            var byte3 = input[pos++] - 128;\n            if (byte3 < 0) throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n            if (byte1 < 0xF0)\n              // 3 byte character\n              utf16 = 4096 * (byte1 - 0xE0) + 64 * byte2 + byte3;else {\n              var byte4 = input[pos++] - 128;\n              if (byte4 < 0) throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n              if (byte1 < 0xF8)\n                // 4 byte character\n                utf16 = 262144 * (byte1 - 0xF0) + 4096 * byte2 + 64 * byte3 + byte4;else\n                // longer encodings are not supported\n                throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n            }\n          }\n        }\n        if (utf16 > 0xFFFF)\n          // 4 byte character - express as a surrogate pair\n          {\n            utf16 -= 0x10000;\n            output += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n            utf16 = 0xDC00 + (utf16 & 0x3FF); // trail character\n          }\n\n        output += String.fromCharCode(utf16);\n      }\n      return output;\n    }\n\n    /**\n    * Repeat keepalive requests, monitor responses.\n    * @ignore\n    */\n    var Pinger = function (client, keepAliveInterval) {\n      this._client = client;\n      this._keepAliveInterval = keepAliveInterval * 1000;\n      this.isReset = false;\n      var pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n      var doTimeout = function (pinger) {\n        return function () {\n          return doPing.apply(pinger);\n        };\n      };\n\n      /** @ignore */\n      var doPing = function () {\n        if (!this.isReset) {\n          this._client._trace(\"Pinger.doPing\", \"Timed out\");\n          this._client._disconnected(ERROR.PING_TIMEOUT.code, format(ERROR.PING_TIMEOUT));\n        } else {\n          this.isReset = false;\n          this._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n          this._client.socket.send(pingReq);\n          this.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n        }\n      };\n      this.reset = function () {\n        this.isReset = true;\n        clearTimeout(this.timeout);\n        if (this._keepAliveInterval > 0) this.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n      };\n      this.cancel = function () {\n        clearTimeout(this.timeout);\n      };\n    };\n\n    /**\n    * Monitor request completion.\n    * @ignore\n    */\n    var Timeout = function (client, timeoutSeconds, action, args) {\n      if (!timeoutSeconds) timeoutSeconds = 30;\n      var doTimeout = function (action, client, args) {\n        return function () {\n          return action.apply(client, args);\n        };\n      };\n      this.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n      this.cancel = function () {\n        clearTimeout(this.timeout);\n      };\n    };\n\n    /**\n     * Internal implementation of the Websockets MQTT V3.1 client.\n     *\n     * @name Paho.ClientImpl @constructor\n     * @param {String} host the DNS nameof the webSocket host.\n     * @param {Number} port the port number for that host.\n     * @param {String} clientId the MQ client identifier.\n     */\n    var ClientImpl = function (uri, host, port, path, clientId) {\n      // Check dependencies are satisfied in this browser.\n      if (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n        throw new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n      }\n      if (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n        throw new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n      }\n      this._trace(\"Paho.Client\", uri, host, port, path, clientId);\n      this.host = host;\n      this.port = port;\n      this.path = path;\n      this.uri = uri;\n      this.clientId = clientId;\n      this._wsuri = null;\n\n      // Local storagekeys are qualified with the following string.\n      // The conditional inclusion of path in the key is for backward\n      // compatibility to when the path was not configurable and assumed to\n      // be /mqtt\n      this._localKey = host + \":\" + port + (path != \"/mqtt\" ? \":\" + path : \"\") + \":\" + clientId + \":\";\n\n      // Create private instance-only message queue\n      // Internal queue of messages to be sent, in sending order.\n      this._msg_queue = [];\n      this._buffered_msg_queue = [];\n\n      // Messages we have sent and are expecting a response for, indexed by their respective message ids.\n      this._sentMessages = {};\n\n      // Messages we have received and acknowleged and are expecting a confirm message for\n      // indexed by their respective message ids.\n      this._receivedMessages = {};\n\n      // Internal list of callbacks to be executed when messages\n      // have been successfully sent over web socket, e.g. disconnect\n      // when it doesn't have to wait for ACK, just message is dispatched.\n      this._notify_msg_sent = {};\n\n      // Unique identifier for SEND messages, incrementing\n      // counter as messages are sent.\n      this._message_identifier = 1;\n\n      // Used to determine the transmission sequence of stored sent messages.\n      this._sequence = 0;\n\n      // Load the local state, if any, from the saved version, only restore state relevant to this client.\n      for (var key in localStorage) if (key.indexOf(\"Sent:\" + this._localKey) === 0 || key.indexOf(\"Received:\" + this._localKey) === 0) this.restore(key);\n    };\n\n    // Messaging Client public instance members.\n    ClientImpl.prototype.host = null;\n    ClientImpl.prototype.port = null;\n    ClientImpl.prototype.path = null;\n    ClientImpl.prototype.uri = null;\n    ClientImpl.prototype.clientId = null;\n\n    // Messaging Client private instance members.\n    ClientImpl.prototype.socket = null;\n    /* true once we have received an acknowledgement to a CONNECT packet. */\n    ClientImpl.prototype.connected = false;\n    /* The largest message identifier allowed, may not be larger than 2**16 but\n     * if set smaller reduces the maximum number of outbound messages allowed.\n     */\n    ClientImpl.prototype.maxMessageIdentifier = 65536;\n    ClientImpl.prototype.connectOptions = null;\n    ClientImpl.prototype.hostIndex = null;\n    ClientImpl.prototype.onConnected = null;\n    ClientImpl.prototype.onConnectionLost = null;\n    ClientImpl.prototype.onMessageDelivered = null;\n    ClientImpl.prototype.onMessageArrived = null;\n    ClientImpl.prototype.traceFunction = null;\n    ClientImpl.prototype._msg_queue = null;\n    ClientImpl.prototype._buffered_msg_queue = null;\n    ClientImpl.prototype._connectTimeout = null;\n    /* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n    ClientImpl.prototype.sendPinger = null;\n    /* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n    ClientImpl.prototype.receivePinger = null;\n    ClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n    ClientImpl.prototype._reconnecting = false;\n    ClientImpl.prototype._reconnectTimeout = null;\n    ClientImpl.prototype.disconnectedPublishing = false;\n    ClientImpl.prototype.disconnectedBufferSize = 5000;\n    ClientImpl.prototype.receiveBuffer = null;\n    ClientImpl.prototype._traceBuffer = null;\n    ClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n    ClientImpl.prototype.connect = function (connectOptions) {\n      var connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n      this._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n      if (this.connected) throw new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n      if (this.socket) throw new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n      if (this._reconnecting) {\n        // connect() function is called while reconnect is in progress.\n        // Terminate the auto reconnect process to use new connect options.\n        this._reconnectTimeout.cancel();\n        this._reconnectTimeout = null;\n        this._reconnecting = false;\n      }\n      this.connectOptions = connectOptions;\n      this._reconnectInterval = 1;\n      this._reconnecting = false;\n      if (connectOptions.uris) {\n        this.hostIndex = 0;\n        this._doConnect(connectOptions.uris[0]);\n      } else {\n        this._doConnect(this.uri);\n      }\n    };\n    ClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n      this._trace(\"Client.subscribe\", filter, subscribeOptions);\n      if (!this.connected) throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n      var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n      wireMessage.topics = filter.constructor === Array ? filter : [filter];\n      if (subscribeOptions.qos === undefined) subscribeOptions.qos = 0;\n      wireMessage.requestedQos = [];\n      for (var i = 0; i < wireMessage.topics.length; i++) wireMessage.requestedQos[i] = subscribeOptions.qos;\n      if (subscribeOptions.onSuccess) {\n        wireMessage.onSuccess = function (grantedQos) {\n          subscribeOptions.onSuccess({\n            invocationContext: subscribeOptions.invocationContext,\n            grantedQos: grantedQos\n          });\n        };\n      }\n      if (subscribeOptions.onFailure) {\n        wireMessage.onFailure = function (errorCode) {\n          subscribeOptions.onFailure({\n            invocationContext: subscribeOptions.invocationContext,\n            errorCode: errorCode,\n            errorMessage: format(errorCode)\n          });\n        };\n      }\n      if (subscribeOptions.timeout) {\n        wireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure, [{\n          invocationContext: subscribeOptions.invocationContext,\n          errorCode: ERROR.SUBSCRIBE_TIMEOUT.code,\n          errorMessage: format(ERROR.SUBSCRIBE_TIMEOUT)\n        }]);\n      }\n\n      // All subscriptions return a SUBACK.\n      this._requires_ack(wireMessage);\n      this._schedule_message(wireMessage);\n    };\n\n    /** @ignore */\n    ClientImpl.prototype.unsubscribe = function (filter, unsubscribeOptions) {\n      this._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n      if (!this.connected) throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n      var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n      wireMessage.topics = filter.constructor === Array ? filter : [filter];\n      if (unsubscribeOptions.onSuccess) {\n        wireMessage.callback = function () {\n          unsubscribeOptions.onSuccess({\n            invocationContext: unsubscribeOptions.invocationContext\n          });\n        };\n      }\n      if (unsubscribeOptions.timeout) {\n        wireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure, [{\n          invocationContext: unsubscribeOptions.invocationContext,\n          errorCode: ERROR.UNSUBSCRIBE_TIMEOUT.code,\n          errorMessage: format(ERROR.UNSUBSCRIBE_TIMEOUT)\n        }]);\n      }\n\n      // All unsubscribes return a SUBACK.\n      this._requires_ack(wireMessage);\n      this._schedule_message(wireMessage);\n    };\n    ClientImpl.prototype.send = function (message) {\n      this._trace(\"Client.send\", message);\n      var wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n      wireMessage.payloadMessage = message;\n      if (this.connected) {\n        // Mark qos 1 & 2 message as \"ACK required\"\n        // For qos 0 message, invoke onMessageDelivered callback if there is one.\n        // Then schedule the message.\n        if (message.qos > 0) {\n          this._requires_ack(wireMessage);\n        } else if (this.onMessageDelivered) {\n          this._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n        }\n        this._schedule_message(wireMessage);\n      } else {\n        // Currently disconnected, will not schedule this message\n        // Check if reconnecting is in progress and disconnected publish is enabled.\n        if (this._reconnecting && this.disconnectedPublishing) {\n          // Check the limit which include the \"required ACK\" messages\n          var messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n          if (messageCount > this.disconnectedBufferSize) {\n            throw new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n          } else {\n            if (message.qos > 0) {\n              // Mark this message as \"ACK required\"\n              this._requires_ack(wireMessage);\n            } else {\n              wireMessage.sequence = ++this._sequence;\n              // Add messages in fifo order to array, by adding to start\n              this._buffered_msg_queue.unshift(wireMessage);\n            }\n          }\n        } else {\n          throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n        }\n      }\n    };\n    ClientImpl.prototype.disconnect = function () {\n      this._trace(\"Client.disconnect\");\n      if (this._reconnecting) {\n        // disconnect() function is called while reconnect is in progress.\n        // Terminate the auto reconnect process.\n        this._reconnectTimeout.cancel();\n        this._reconnectTimeout = null;\n        this._reconnecting = false;\n      }\n      if (!this.socket) throw new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n      var wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n      // Run the disconnected call back as soon as the message has been sent,\n      // in case of a failure later on in the disconnect processing.\n      // as a consequence, the _disconected call back may be run several times.\n      this._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n      this._schedule_message(wireMessage);\n    };\n    ClientImpl.prototype.getTraceLog = function () {\n      if (this._traceBuffer !== null) {\n        this._trace(\"Client.getTraceLog\", new Date());\n        this._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n        for (var key in this._sentMessages) this._trace(\"_sentMessages \", key, this._sentMessages[key]);\n        for (var key in this._receivedMessages) this._trace(\"_receivedMessages \", key, this._receivedMessages[key]);\n        return this._traceBuffer;\n      }\n    };\n    ClientImpl.prototype.startTrace = function () {\n      if (this._traceBuffer === null) {\n        this._traceBuffer = [];\n      }\n      this._trace(\"Client.startTrace\", new Date(), version);\n    };\n    ClientImpl.prototype.stopTrace = function () {\n      delete this._traceBuffer;\n    };\n    ClientImpl.prototype._doConnect = function (wsurl) {\n      // When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n      if (this.connectOptions.useSSL) {\n        var uriParts = wsurl.split(\":\");\n        uriParts[0] = \"wss\";\n        wsurl = uriParts.join(\":\");\n      }\n      this._wsuri = wsurl;\n      this.connected = false;\n      if (this.connectOptions.mqttVersion < 4) {\n        this.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n      } else {\n        this.socket = new WebSocket(wsurl, [\"mqtt\"]);\n      }\n      this.socket.binaryType = \"arraybuffer\";\n      this.socket.onopen = scope(this._on_socket_open, this);\n      this.socket.onmessage = scope(this._on_socket_message, this);\n      this.socket.onerror = scope(this._on_socket_error, this);\n      this.socket.onclose = scope(this._on_socket_close, this);\n      this.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n      this.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n      if (this._connectTimeout) {\n        this._connectTimeout.cancel();\n        this._connectTimeout = null;\n      }\n      this._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected, [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n    };\n\n    // Schedule a new message to be sent over the WebSockets\n    // connection. CONNECT messages cause WebSocket connection\n    // to be started. All other messages are queued internally\n    // until this has happened. When WS connection starts, process\n    // all outstanding messages.\n    ClientImpl.prototype._schedule_message = function (message) {\n      // Add messages in fifo order to array, by adding to start\n      this._msg_queue.unshift(message);\n      // Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n      if (this.connected) {\n        this._process_queue();\n      }\n    };\n    ClientImpl.prototype.store = function (prefix, wireMessage) {\n      var storedMessage = {\n        type: wireMessage.type,\n        messageIdentifier: wireMessage.messageIdentifier,\n        version: 1\n      };\n      switch (wireMessage.type) {\n        case MESSAGE_TYPE.PUBLISH:\n          if (wireMessage.pubRecReceived) storedMessage.pubRecReceived = true;\n\n          // Convert the payload to a hex string.\n          storedMessage.payloadMessage = {};\n          var hex = \"\";\n          var messageBytes = wireMessage.payloadMessage.payloadBytes;\n          for (var i = 0; i < messageBytes.length; i++) {\n            if (messageBytes[i] <= 0xF) hex = hex + \"0\" + messageBytes[i].toString(16);else hex = hex + messageBytes[i].toString(16);\n          }\n          storedMessage.payloadMessage.payloadHex = hex;\n          storedMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n          storedMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n          if (wireMessage.payloadMessage.duplicate) storedMessage.payloadMessage.duplicate = true;\n          if (wireMessage.payloadMessage.retained) storedMessage.payloadMessage.retained = true;\n\n          // Add a sequence number to sent messages.\n          if (prefix.indexOf(\"Sent:\") === 0) {\n            if (wireMessage.sequence === undefined) wireMessage.sequence = ++this._sequence;\n            storedMessage.sequence = wireMessage.sequence;\n          }\n          break;\n        default:\n          throw Error(format(ERROR.INVALID_STORED_DATA, [prefix + this._localKey + wireMessage.messageIdentifier, storedMessage]));\n      }\n      localStorage.setItem(prefix + this._localKey + wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n    };\n    ClientImpl.prototype.restore = function (key) {\n      var value = localStorage.getItem(key);\n      var storedMessage = JSON.parse(value);\n      var wireMessage = new WireMessage(storedMessage.type, storedMessage);\n      switch (storedMessage.type) {\n        case MESSAGE_TYPE.PUBLISH:\n          // Replace the payload message with a Message object.\n          var hex = storedMessage.payloadMessage.payloadHex;\n          var buffer = new ArrayBuffer(hex.length / 2);\n          var byteStream = new Uint8Array(buffer);\n          var i = 0;\n          while (hex.length >= 2) {\n            var x = parseInt(hex.substring(0, 2), 16);\n            hex = hex.substring(2, hex.length);\n            byteStream[i++] = x;\n          }\n          var payloadMessage = new Message(byteStream);\n          payloadMessage.qos = storedMessage.payloadMessage.qos;\n          payloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n          if (storedMessage.payloadMessage.duplicate) payloadMessage.duplicate = true;\n          if (storedMessage.payloadMessage.retained) payloadMessage.retained = true;\n          wireMessage.payloadMessage = payloadMessage;\n          break;\n        default:\n          throw Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n      }\n      if (key.indexOf(\"Sent:\" + this._localKey) === 0) {\n        wireMessage.payloadMessage.duplicate = true;\n        this._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n      } else if (key.indexOf(\"Received:\" + this._localKey) === 0) {\n        this._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n      }\n    };\n    ClientImpl.prototype._process_queue = function () {\n      var message = null;\n\n      // Send all queued messages down socket connection\n      while (message = this._msg_queue.pop()) {\n        this._socket_send(message);\n        // Notify listeners that message was successfully sent\n        if (this._notify_msg_sent[message]) {\n          this._notify_msg_sent[message]();\n          delete this._notify_msg_sent[message];\n        }\n      }\n    };\n\n    /**\n    * Expect an ACK response for this message. Add message to the set of in progress\n    * messages and set an unused identifier in this message.\n    * @ignore\n    */\n    ClientImpl.prototype._requires_ack = function (wireMessage) {\n      var messageCount = Object.keys(this._sentMessages).length;\n      if (messageCount > this.maxMessageIdentifier) throw Error(\"Too many messages:\" + messageCount);\n      while (this._sentMessages[this._message_identifier] !== undefined) {\n        this._message_identifier++;\n      }\n      wireMessage.messageIdentifier = this._message_identifier;\n      this._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n      if (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n        this.store(\"Sent:\", wireMessage);\n      }\n      if (this._message_identifier === this.maxMessageIdentifier) {\n        this._message_identifier = 1;\n      }\n    };\n\n    /**\n    * Called when the underlying websocket has been opened.\n    * @ignore\n    */\n    ClientImpl.prototype._on_socket_open = function () {\n      // Create the CONNECT message object.\n      var wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n      wireMessage.clientId = this.clientId;\n      this._socket_send(wireMessage);\n    };\n\n    /**\n    * Called when the underlying websocket has received a complete packet.\n    * @ignore\n    */\n    ClientImpl.prototype._on_socket_message = function (event) {\n      this._trace(\"Client._on_socket_message\", event.data);\n      var messages = this._deframeMessages(event.data);\n      for (var i = 0; i < messages.length; i += 1) {\n        this._handleMessage(messages[i]);\n      }\n    };\n    ClientImpl.prototype._deframeMessages = function (data) {\n      var byteArray = new Uint8Array(data);\n      var messages = [];\n      if (this.receiveBuffer) {\n        var newData = new Uint8Array(this.receiveBuffer.length + byteArray.length);\n        newData.set(this.receiveBuffer);\n        newData.set(byteArray, this.receiveBuffer.length);\n        byteArray = newData;\n        delete this.receiveBuffer;\n      }\n      try {\n        var offset = 0;\n        while (offset < byteArray.length) {\n          var result = decodeMessage(byteArray, offset);\n          var wireMessage = result[0];\n          offset = result[1];\n          if (wireMessage !== null) {\n            messages.push(wireMessage);\n          } else {\n            break;\n          }\n        }\n        if (offset < byteArray.length) {\n          this.receiveBuffer = byteArray.subarray(offset);\n        }\n      } catch (error) {\n        var errorStack = error.hasOwnProperty(\"stack\") == \"undefined\" ? error.stack.toString() : \"No Error Stack Available\";\n        this._disconnected(ERROR.INTERNAL_ERROR.code, format(ERROR.INTERNAL_ERROR, [error.message, errorStack]));\n        return;\n      }\n      return messages;\n    };\n    ClientImpl.prototype._handleMessage = function (wireMessage) {\n      this._trace(\"Client._handleMessage\", wireMessage);\n      try {\n        switch (wireMessage.type) {\n          case MESSAGE_TYPE.CONNACK:\n            this._connectTimeout.cancel();\n            if (this._reconnectTimeout) this._reconnectTimeout.cancel();\n\n            // If we have started using clean session then clear up the local state.\n            if (this.connectOptions.cleanSession) {\n              for (var key in this._sentMessages) {\n                var sentMessage = this._sentMessages[key];\n                localStorage.removeItem(\"Sent:\" + this._localKey + sentMessage.messageIdentifier);\n              }\n              this._sentMessages = {};\n              for (var key in this._receivedMessages) {\n                var receivedMessage = this._receivedMessages[key];\n                localStorage.removeItem(\"Received:\" + this._localKey + receivedMessage.messageIdentifier);\n              }\n              this._receivedMessages = {};\n            }\n            // Client connected and ready for business.\n            if (wireMessage.returnCode === 0) {\n              this.connected = true;\n              // Jump to the end of the list of uris and stop looking for a good host.\n\n              if (this.connectOptions.uris) this.hostIndex = this.connectOptions.uris.length;\n            } else {\n              this._disconnected(ERROR.CONNACK_RETURNCODE.code, format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n              break;\n            }\n\n            // Resend messages.\n            var sequencedMessages = [];\n            for (var msgId in this._sentMessages) {\n              if (this._sentMessages.hasOwnProperty(msgId)) sequencedMessages.push(this._sentMessages[msgId]);\n            }\n\n            // Also schedule qos 0 buffered messages if any\n            if (this._buffered_msg_queue.length > 0) {\n              var msg = null;\n              while (msg = this._buffered_msg_queue.pop()) {\n                sequencedMessages.push(msg);\n                if (this.onMessageDelivered) this._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n              }\n            }\n\n            // Sort sentMessages into the original sent order.\n            var sequencedMessages = sequencedMessages.sort(function (a, b) {\n              return a.sequence - b.sequence;\n            });\n            for (var i = 0, len = sequencedMessages.length; i < len; i++) {\n              var sentMessage = sequencedMessages[i];\n              if (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n                var pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {\n                  messageIdentifier: sentMessage.messageIdentifier\n                });\n                this._schedule_message(pubRelMessage);\n              } else {\n                this._schedule_message(sentMessage);\n              }\n            }\n\n            // Execute the connectOptions.onSuccess callback if there is one.\n            // Will also now return if this connection was the result of an automatic\n            // reconnect and which URI was successfully connected to.\n            if (this.connectOptions.onSuccess) {\n              this.connectOptions.onSuccess({\n                invocationContext: this.connectOptions.invocationContext\n              });\n            }\n            var reconnected = false;\n            if (this._reconnecting) {\n              reconnected = true;\n              this._reconnectInterval = 1;\n              this._reconnecting = false;\n            }\n\n            // Execute the onConnected callback if there is one.\n            this._connected(reconnected, this._wsuri);\n\n            // Process all queued messages now that the connection is established.\n            this._process_queue();\n            break;\n          case MESSAGE_TYPE.PUBLISH:\n            this._receivePublish(wireMessage);\n            break;\n          case MESSAGE_TYPE.PUBACK:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n            // If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n            if (sentMessage) {\n              delete this._sentMessages[wireMessage.messageIdentifier];\n              localStorage.removeItem(\"Sent:\" + this._localKey + wireMessage.messageIdentifier);\n              if (this.onMessageDelivered) this.onMessageDelivered(sentMessage.payloadMessage);\n            }\n            break;\n          case MESSAGE_TYPE.PUBREC:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n            // If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n            if (sentMessage) {\n              sentMessage.pubRecReceived = true;\n              var pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {\n                messageIdentifier: wireMessage.messageIdentifier\n              });\n              this.store(\"Sent:\", sentMessage);\n              this._schedule_message(pubRelMessage);\n            }\n            break;\n          case MESSAGE_TYPE.PUBREL:\n            var receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n            localStorage.removeItem(\"Received:\" + this._localKey + wireMessage.messageIdentifier);\n            // If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n            if (receivedMessage) {\n              this._receiveMessage(receivedMessage);\n              delete this._receivedMessages[wireMessage.messageIdentifier];\n            }\n            // Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n            var pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {\n              messageIdentifier: wireMessage.messageIdentifier\n            });\n            this._schedule_message(pubCompMessage);\n            break;\n          case MESSAGE_TYPE.PUBCOMP:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n            delete this._sentMessages[wireMessage.messageIdentifier];\n            localStorage.removeItem(\"Sent:\" + this._localKey + wireMessage.messageIdentifier);\n            if (this.onMessageDelivered) this.onMessageDelivered(sentMessage.payloadMessage);\n            break;\n          case MESSAGE_TYPE.SUBACK:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n            if (sentMessage) {\n              if (sentMessage.timeOut) sentMessage.timeOut.cancel();\n              // This will need to be fixed when we add multiple topic support\n              if (wireMessage.returnCode[0] === 0x80) {\n                if (sentMessage.onFailure) {\n                  sentMessage.onFailure(wireMessage.returnCode);\n                }\n              } else if (sentMessage.onSuccess) {\n                sentMessage.onSuccess(wireMessage.returnCode);\n              }\n              delete this._sentMessages[wireMessage.messageIdentifier];\n            }\n            break;\n          case MESSAGE_TYPE.UNSUBACK:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n            if (sentMessage) {\n              if (sentMessage.timeOut) sentMessage.timeOut.cancel();\n              if (sentMessage.callback) {\n                sentMessage.callback();\n              }\n              delete this._sentMessages[wireMessage.messageIdentifier];\n            }\n            break;\n          case MESSAGE_TYPE.PINGRESP:\n            /* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n            this.sendPinger.reset();\n            break;\n          case MESSAGE_TYPE.DISCONNECT:\n            // Clients do not expect to receive disconnect packets.\n            this._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code, format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n            break;\n          default:\n            this._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code, format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n        }\n      } catch (error) {\n        var errorStack = error.hasOwnProperty(\"stack\") == \"undefined\" ? error.stack.toString() : \"No Error Stack Available\";\n        this._disconnected(ERROR.INTERNAL_ERROR.code, format(ERROR.INTERNAL_ERROR, [error.message, errorStack]));\n        return;\n      }\n    };\n\n    /** @ignore */\n    ClientImpl.prototype._on_socket_error = function (error) {\n      if (!this._reconnecting) {\n        this._disconnected(ERROR.SOCKET_ERROR.code, format(ERROR.SOCKET_ERROR, [error.data]));\n      }\n    };\n\n    /** @ignore */\n    ClientImpl.prototype._on_socket_close = function () {\n      if (!this._reconnecting) {\n        this._disconnected(ERROR.SOCKET_CLOSE.code, format(ERROR.SOCKET_CLOSE));\n      }\n    };\n\n    /** @ignore */\n    ClientImpl.prototype._socket_send = function (wireMessage) {\n      if (wireMessage.type == 1) {\n        var wireMessageMasked = this._traceMask(wireMessage, \"password\");\n        this._trace(\"Client._socket_send\", wireMessageMasked);\n      } else this._trace(\"Client._socket_send\", wireMessage);\n      this.socket.send(wireMessage.encode());\n      /* We have proved to the server we are alive. */\n      this.sendPinger.reset();\n    };\n\n    /** @ignore */\n    ClientImpl.prototype._receivePublish = function (wireMessage) {\n      switch (wireMessage.payloadMessage.qos) {\n        case \"undefined\":\n        case 0:\n          this._receiveMessage(wireMessage);\n          break;\n        case 1:\n          var pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {\n            messageIdentifier: wireMessage.messageIdentifier\n          });\n          this._schedule_message(pubAckMessage);\n          this._receiveMessage(wireMessage);\n          break;\n        case 2:\n          this._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n          this.store(\"Received:\", wireMessage);\n          var pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {\n            messageIdentifier: wireMessage.messageIdentifier\n          });\n          this._schedule_message(pubRecMessage);\n          break;\n        default:\n          throw Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n      }\n    };\n\n    /** @ignore */\n    ClientImpl.prototype._receiveMessage = function (wireMessage) {\n      if (this.onMessageArrived) {\n        this.onMessageArrived(wireMessage.payloadMessage);\n      }\n    };\n\n    /**\n    * Client has connected.\n    * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n    * @param {uri} [string] fully qualified WebSocket URI of the server.\n    */\n    ClientImpl.prototype._connected = function (reconnect, uri) {\n      // Execute the onConnected callback if there is one.\n      if (this.onConnected) this.onConnected(reconnect, uri);\n    };\n\n    /**\n    * Attempts to reconnect the client to the server.\n     * For each reconnect attempt, will double the reconnect interval\n     * up to 128 seconds.\n    */\n    ClientImpl.prototype._reconnect = function () {\n      this._trace(\"Client._reconnect\");\n      if (!this.connected) {\n        this._reconnecting = true;\n        this.sendPinger.cancel();\n        this.receivePinger.cancel();\n        if (this._reconnectInterval < 128) this._reconnectInterval = this._reconnectInterval * 2;\n        if (this.connectOptions.uris) {\n          this.hostIndex = 0;\n          this._doConnect(this.connectOptions.uris[0]);\n        } else {\n          this._doConnect(this.uri);\n        }\n      }\n    };\n\n    /**\n    * Client has disconnected either at its own request or because the server\n    * or network disconnected it. Remove all non-durable state.\n    * @param {errorCode} [number] the error number.\n    * @param {errorText} [string] the error text.\n    * @ignore\n    */\n    ClientImpl.prototype._disconnected = function (errorCode, errorText) {\n      this._trace(\"Client._disconnected\", errorCode, errorText);\n      if (errorCode !== undefined && this._reconnecting) {\n        //Continue automatic reconnect process\n        this._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n        return;\n      }\n      this.sendPinger.cancel();\n      this.receivePinger.cancel();\n      if (this._connectTimeout) {\n        this._connectTimeout.cancel();\n        this._connectTimeout = null;\n      }\n\n      // Clear message buffers.\n      this._msg_queue = [];\n      this._buffered_msg_queue = [];\n      this._notify_msg_sent = {};\n      if (this.socket) {\n        // Cancel all socket callbacks so that they cannot be driven again by this socket.\n        this.socket.onopen = null;\n        this.socket.onmessage = null;\n        this.socket.onerror = null;\n        this.socket.onclose = null;\n        if (this.socket.readyState === 1) this.socket.close();\n        delete this.socket;\n      }\n      if (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length - 1) {\n        // Try the next host.\n        this.hostIndex++;\n        this._doConnect(this.connectOptions.uris[this.hostIndex]);\n      } else {\n        if (errorCode === undefined) {\n          errorCode = ERROR.OK.code;\n          errorText = format(ERROR.OK);\n        }\n\n        // Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n        if (this.connected) {\n          this.connected = false;\n          // Execute the connectionLostCallback if there is one, and we were connected.\n          if (this.onConnectionLost) {\n            this.onConnectionLost({\n              errorCode: errorCode,\n              errorMessage: errorText,\n              reconnect: this.connectOptions.reconnect,\n              uri: this._wsuri\n            });\n          }\n          if (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n            // Start automatic reconnect process for the very first time since last successful connect.\n            this._reconnectInterval = 1;\n            this._reconnect();\n            return;\n          }\n        } else {\n          // Otherwise we never had a connection, so indicate that the connect has failed.\n          if (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n            this._trace(\"Failed to connect V4, dropping back to V3\");\n            this.connectOptions.mqttVersion = 3;\n            if (this.connectOptions.uris) {\n              this.hostIndex = 0;\n              this._doConnect(this.connectOptions.uris[0]);\n            } else {\n              this._doConnect(this.uri);\n            }\n          } else if (this.connectOptions.onFailure) {\n            this.connectOptions.onFailure({\n              invocationContext: this.connectOptions.invocationContext,\n              errorCode: errorCode,\n              errorMessage: errorText\n            });\n          }\n        }\n      }\n    };\n\n    /** @ignore */\n    ClientImpl.prototype._trace = function () {\n      // Pass trace message back to client's callback function\n      if (this.traceFunction) {\n        var args = Array.prototype.slice.call(arguments);\n        for (var i in args) {\n          if (typeof args[i] !== \"undefined\") args.splice(i, 1, JSON.stringify(args[i]));\n        }\n        var record = args.join(\"\");\n        this.traceFunction({\n          severity: \"Debug\",\n          message: record\n        });\n      }\n\n      //buffer style trace\n      if (this._traceBuffer !== null) {\n        for (var i = 0, max = arguments.length; i < max; i++) {\n          if (this._traceBuffer.length == this._MAX_TRACE_ENTRIES) {\n            this._traceBuffer.shift();\n          }\n          if (i === 0) this._traceBuffer.push(arguments[i]);else if (typeof arguments[i] === \"undefined\") this._traceBuffer.push(arguments[i]);else this._traceBuffer.push(\"  \" + JSON.stringify(arguments[i]));\n        }\n      }\n    };\n\n    /** @ignore */\n    ClientImpl.prototype._traceMask = function (traceObject, masked) {\n      var traceObjectMasked = {};\n      for (var attr in traceObject) {\n        if (traceObject.hasOwnProperty(attr)) {\n          if (attr == masked) traceObjectMasked[attr] = \"******\";else traceObjectMasked[attr] = traceObject[attr];\n        }\n      }\n      return traceObjectMasked;\n    };\n\n    // ------------------------------------------------------------------------\n    // Public Programming interface.\n    // ------------------------------------------------------------------------\n\n    /**\n    * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n    * <p>\n    * Most applications will create just one Client object and then call its connect() method,\n    * however applications can create more than one Client object if they wish.\n    * In this case the combination of host, port and clientId attributes must be different for each Client object.\n    * <p>\n    * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n    * (even though the underlying protocol exchange might be synchronous in nature).\n    * This means they signal their completion by calling back to the application,\n    * via Success or Failure callback functions provided by the application on the method in question.\n    * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n    * of the script that made the invocation.\n    * <p>\n    * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n    * that are defined on the {@link Paho.Client} object.\n    * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n    *\n    * @name Paho.Client\n    *\n    * @constructor\n    *\n    * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n    * @param {number} port - the port number to connect to - only required if host is not a URI\n    * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n    * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n    *\n    * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n    * @property {number} port - <i>read only</i> the server's port.\n    * @property {string} path - <i>read only</i> the server's path.\n    * @property {string} clientId - <i>read only</i> used when connecting to the server.\n    * @property {function} onConnectionLost - called when a connection has been lost.\n    *                            after a connect() method has succeeded.\n    *                            Establish the call back used when a connection has been lost. The connection may be\n    *                            lost because the client initiates a disconnect or because the server or network\n    *                            cause the client to be disconnected. The disconnect call back may be called without\n    *                            the connectionComplete call back being invoked if, for example the client fails to\n    *                            connect.\n    *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n    *                            <ol>\n    *                            <li>errorCode\n    *                            <li>errorMessage\n    *                            </ol>\n    * @property {function} onMessageDelivered - called when a message has been delivered.\n    *                            All processing that this Client will ever do has been completed. So, for example,\n    *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n    *                            and the message has been removed from persistent storage before this callback is invoked.\n    *                            Parameters passed to the onMessageDelivered callback are:\n    *                            <ol>\n    *                            <li>{@link Paho.Message} that was delivered.\n    *                            </ol>\n    * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n    *                            Parameters passed to the onMessageArrived callback are:\n    *                            <ol>\n    *                            <li>{@link Paho.Message} that has arrived.\n    *                            </ol>\n    * @property {function} onConnected - called when a connection is successfully made to the server.\n    *                                  after a connect() method.\n    *                                  Parameters passed to the onConnected callback are:\n    *                                  <ol>\n    *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n    *                                  <li>URI (string) - The URI used to connect to the server.</li>\n    *                                  </ol>\n    * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n    *                                            in the event that the connection to the server is lost.\n    * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n    *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n    * @property {function} trace - called whenever trace is called. TODO\n    */\n    var Client = function (host, port, path, clientId) {\n      var uri;\n      if (typeof host !== \"string\") throw new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n      if (arguments.length == 2) {\n        // host: must be full ws:// uri\n        // port: clientId\n        clientId = port;\n        uri = host;\n        var match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n        if (match) {\n          host = match[4] || match[2];\n          port = parseInt(match[7]);\n          path = match[8];\n        } else {\n          throw new Error(format(ERROR.INVALID_ARGUMENT, [host, \"host\"]));\n        }\n      } else {\n        if (arguments.length == 3) {\n          clientId = path;\n          path = \"/mqtt\";\n        }\n        if (typeof port !== \"number\" || port < 0) throw new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n        if (typeof path !== \"string\") throw new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n        var ipv6AddSBracket = host.indexOf(\":\") !== -1 && host.slice(0, 1) !== \"[\" && host.slice(-1) !== \"]\";\n        uri = \"ws://\" + (ipv6AddSBracket ? \"[\" + host + \"]\" : host) + \":\" + port + path;\n      }\n      var clientIdLength = 0;\n      for (var i = 0; i < clientId.length; i++) {\n        var charCode = clientId.charCodeAt(i);\n        if (0xD800 <= charCode && charCode <= 0xDBFF) {\n          i++; // Surrogate pair.\n        }\n\n        clientIdLength++;\n      }\n      if (typeof clientId !== \"string\" || clientIdLength > 65535) throw new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n      var client = new ClientImpl(uri, host, port, path, clientId);\n\n      //Public Properties\n      Object.defineProperties(this, {\n        \"host\": {\n          get: function () {\n            return host;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"port\": {\n          get: function () {\n            return port;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"path\": {\n          get: function () {\n            return path;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"uri\": {\n          get: function () {\n            return uri;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"clientId\": {\n          get: function () {\n            return client.clientId;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"onConnected\": {\n          get: function () {\n            return client.onConnected;\n          },\n          set: function (newOnConnected) {\n            if (typeof newOnConnected === \"function\") client.onConnected = newOnConnected;else throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n          }\n        },\n        \"disconnectedPublishing\": {\n          get: function () {\n            return client.disconnectedPublishing;\n          },\n          set: function (newDisconnectedPublishing) {\n            client.disconnectedPublishing = newDisconnectedPublishing;\n          }\n        },\n        \"disconnectedBufferSize\": {\n          get: function () {\n            return client.disconnectedBufferSize;\n          },\n          set: function (newDisconnectedBufferSize) {\n            client.disconnectedBufferSize = newDisconnectedBufferSize;\n          }\n        },\n        \"onConnectionLost\": {\n          get: function () {\n            return client.onConnectionLost;\n          },\n          set: function (newOnConnectionLost) {\n            if (typeof newOnConnectionLost === \"function\") client.onConnectionLost = newOnConnectionLost;else throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n          }\n        },\n        \"onMessageDelivered\": {\n          get: function () {\n            return client.onMessageDelivered;\n          },\n          set: function (newOnMessageDelivered) {\n            if (typeof newOnMessageDelivered === \"function\") client.onMessageDelivered = newOnMessageDelivered;else throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n          }\n        },\n        \"onMessageArrived\": {\n          get: function () {\n            return client.onMessageArrived;\n          },\n          set: function (newOnMessageArrived) {\n            if (typeof newOnMessageArrived === \"function\") client.onMessageArrived = newOnMessageArrived;else throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n          }\n        },\n        \"trace\": {\n          get: function () {\n            return client.traceFunction;\n          },\n          set: function (trace) {\n            if (typeof trace === \"function\") {\n              client.traceFunction = trace;\n            } else {\n              throw new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n            }\n          }\n        }\n      });\n\n      /**\n      * Connect this Messaging client to its server.\n      *\n      * @name Paho.Client#connect\n      * @function\n      * @param {object} connectOptions - Attributes used with the connection.\n      * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n      *                    number of seconds, it is deemed to have failed.\n      *                    The default is 30 seconds.\n      * @param {string} connectOptions.userName - Authentication username for this connection.\n      * @param {string} connectOptions.password - Authentication password for this connection.\n      * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n      *                    disconnects abnormally.\n      * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n      *                    there is no activity for this number of seconds.\n      *                    The default value of 60 seconds is assumed if not set.\n      * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n      *                    persistent state is deleted on successful connect.\n      * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n      * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n      * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n      *                    has been received from the server.\n      * A single response object parameter is passed to the onSuccess callback containing the following fields:\n      * <ol>\n      * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n      * </ol>\n      * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n      * A single response object parameter is passed to the onFailure callback containing the following fields:\n      * <ol>\n      * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n      * <li>errorCode a number indicating the nature of the error.\n      * <li>errorMessage text describing the error.\n      * </ol>\n      * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n      * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n      * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n      * one of then succeeds.\n      * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n      * is not used.\n      * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n      * to the server if the connection is lost.\n      *<ul>\n      *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n      * connection is lost.</li>\n      *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n      * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n      * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n      *</ul>\n      * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n      *<ul>\n      *<li>3 - MQTT V3.1</li>\n      *<li>4 - MQTT V3.1.1</li>\n      *</ul>\n      * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n      * selected MQTT Version or will fail to connect.\n      * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n      * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n      * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n      * the hosts array will be converted to uris and will overwrite this property.\n      * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n      * or disconnected before calling connect for a second or subsequent time.\n      */\n      this.connect = function (connectOptions) {\n        connectOptions = connectOptions || {};\n        validate(connectOptions, {\n          timeout: \"number\",\n          userName: \"string\",\n          password: \"string\",\n          willMessage: \"object\",\n          keepAliveInterval: \"number\",\n          cleanSession: \"boolean\",\n          useSSL: \"boolean\",\n          invocationContext: \"object\",\n          onSuccess: \"function\",\n          onFailure: \"function\",\n          hosts: \"object\",\n          ports: \"object\",\n          reconnect: \"boolean\",\n          mqttVersion: \"number\",\n          mqttVersionExplicit: \"boolean\",\n          uris: \"object\"\n        });\n\n        // If no keep alive interval is set, assume 60 seconds.\n        if (connectOptions.keepAliveInterval === undefined) connectOptions.keepAliveInterval = 60;\n        if (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n          throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n        }\n        if (connectOptions.mqttVersion === undefined) {\n          connectOptions.mqttVersionExplicit = false;\n          connectOptions.mqttVersion = 4;\n        } else {\n          connectOptions.mqttVersionExplicit = true;\n        }\n\n        //Check that if password is set, so is username\n        if (connectOptions.password !== undefined && connectOptions.userName === undefined) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n        if (connectOptions.willMessage) {\n          if (!(connectOptions.willMessage instanceof Message)) throw new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n          // The will message must have a payload that can be represented as a string.\n          // Cause the willMessage to throw an exception if this is not the case.\n          connectOptions.willMessage.stringPayload = null;\n          if (typeof connectOptions.willMessage.destinationName === \"undefined\") throw new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n        }\n        if (typeof connectOptions.cleanSession === \"undefined\") connectOptions.cleanSession = true;\n        if (connectOptions.hosts) {\n          if (!(connectOptions.hosts instanceof Array)) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n          if (connectOptions.hosts.length < 1) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n          var usingURIs = false;\n          for (var i = 0; i < connectOptions.hosts.length; i++) {\n            if (typeof connectOptions.hosts[i] !== \"string\") throw new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\" + i + \"]\"]));\n            if (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n              if (i === 0) {\n                usingURIs = true;\n              } else if (!usingURIs) {\n                throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\" + i + \"]\"]));\n              }\n            } else if (usingURIs) {\n              throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\" + i + \"]\"]));\n            }\n          }\n          if (!usingURIs) {\n            if (!connectOptions.ports) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n            if (!(connectOptions.ports instanceof Array)) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n            if (connectOptions.hosts.length !== connectOptions.ports.length) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n            connectOptions.uris = [];\n            for (var i = 0; i < connectOptions.hosts.length; i++) {\n              if (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0) throw new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\" + i + \"]\"]));\n              var host = connectOptions.hosts[i];\n              var port = connectOptions.ports[i];\n              var ipv6 = host.indexOf(\":\") !== -1;\n              uri = \"ws://\" + (ipv6 ? \"[\" + host + \"]\" : host) + \":\" + port + path;\n              connectOptions.uris.push(uri);\n            }\n          } else {\n            connectOptions.uris = connectOptions.hosts;\n          }\n        }\n        client.connect(connectOptions);\n      };\n\n      /**\n      * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n      *\n      * @name Paho.Client#subscribe\n      * @function\n      * @param {string} filter describing the destinations to receive messages from.\n      * <br>\n      * @param {object} subscribeOptions - used to control the subscription\n      *\n      * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n      *                                  as a result of making this subscription.\n      * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n      *                                  or onFailure callback.\n      * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n      *                                  has been received from the server.\n      *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n      *                                  <ol>\n      *                                  <li>invocationContext if set in the subscribeOptions.\n      *                                  </ol>\n      * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n      *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n      *                                  <ol>\n      *                                  <li>invocationContext - if set in the subscribeOptions.\n      *                                  <li>errorCode - a number indicating the nature of the error.\n      *                                  <li>errorMessage - text describing the error.\n      *                                  </ol>\n      * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n      *                                  seconds after which the onFailure calback is called.\n      *                                  The presence of a timeout does not prevent the onSuccess\n      *                                  callback from being called when the subscribe completes.\n      * @throws {InvalidState} if the client is not in connected state.\n      */\n      this.subscribe = function (filter, subscribeOptions) {\n        if (typeof filter !== \"string\" && filter.constructor !== Array) throw new Error(\"Invalid argument:\" + filter);\n        subscribeOptions = subscribeOptions || {};\n        validate(subscribeOptions, {\n          qos: \"number\",\n          invocationContext: \"object\",\n          onSuccess: \"function\",\n          onFailure: \"function\",\n          timeout: \"number\"\n        });\n        if (subscribeOptions.timeout && !subscribeOptions.onFailure) throw new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n        if (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2)) throw new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n        client.subscribe(filter, subscribeOptions);\n      };\n\n      /**\n       * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n       *\n       * @name Paho.Client#unsubscribe\n       * @function\n       * @param {string} filter - describing the destinations to receive messages from.\n       * @param {object} unsubscribeOptions - used to control the subscription\n       * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n      \t\t\t\t\t\t\t\t\t  or onFailure callback.\n       * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n       *                                    A single response object parameter is passed to the\n       *                                    onSuccess callback containing the following fields:\n       *                                    <ol>\n       *                                    <li>invocationContext - if set in the unsubscribeOptions.\n       *                                    </ol>\n       * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n       *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n       *                                    <ol>\n       *                                    <li>invocationContext - if set in the unsubscribeOptions.\n       *                                    <li>errorCode - a number indicating the nature of the error.\n       *                                    <li>errorMessage - text describing the error.\n       *                                    </ol>\n       * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n       *                                    after which the onFailure callback is called. The presence of\n       *                                    a timeout does not prevent the onSuccess callback from being\n       *                                    called when the unsubscribe completes\n       * @throws {InvalidState} if the client is not in connected state.\n       */\n      this.unsubscribe = function (filter, unsubscribeOptions) {\n        if (typeof filter !== \"string\" && filter.constructor !== Array) throw new Error(\"Invalid argument:\" + filter);\n        unsubscribeOptions = unsubscribeOptions || {};\n        validate(unsubscribeOptions, {\n          invocationContext: \"object\",\n          onSuccess: \"function\",\n          onFailure: \"function\",\n          timeout: \"number\"\n        });\n        if (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure) throw new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n        client.unsubscribe(filter, unsubscribeOptions);\n      };\n\n      /**\n      * Send a message to the consumers of the destination in the Message.\n      *\n      * @name Paho.Client#send\n      * @function\n      * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n      * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n      * @param {String|ArrayBuffer} payload - The message data to be sent.\n      * @param {number} qos The Quality of Service used to deliver the message.\n      * \t\t<dl>\n      * \t\t\t<dt>0 Best effort (default).\n      *     \t\t\t<dt>1 At least once.\n      *     \t\t\t<dt>2 Exactly once.\n      * \t\t</dl>\n      * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n      *                     to both current and future subscriptions.\n      *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n      *                     A received message has the retained boolean set to true if the message was published\n      *                     with the retained boolean set to true\n      *                     and the subscrption was made after the message has been published.\n      * @throws {InvalidState} if the client is not connected.\n      */\n      this.send = function (topic, payload, qos, retained) {\n        var message;\n        if (arguments.length === 0) {\n          throw new Error(\"Invalid argument.\" + \"length\");\n        } else if (arguments.length == 1) {\n          if (!(topic instanceof Message) && typeof topic !== \"string\") throw new Error(\"Invalid argument:\" + typeof topic);\n          message = topic;\n          if (typeof message.destinationName === \"undefined\") throw new Error(format(ERROR.INVALID_ARGUMENT, [message.destinationName, \"Message.destinationName\"]));\n          client.send(message);\n        } else {\n          //parameter checking in Message object\n          message = new Message(payload);\n          message.destinationName = topic;\n          if (arguments.length >= 3) message.qos = qos;\n          if (arguments.length >= 4) message.retained = retained;\n          client.send(message);\n        }\n      };\n\n      /**\n      * Publish a message to the consumers of the destination in the Message.\n      * Synonym for Paho.Mqtt.Client#send\n      *\n      * @name Paho.Client#publish\n      * @function\n      * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n      * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n      * @param {String|ArrayBuffer} payload - The message data to be published.\n      * @param {number} qos The Quality of Service used to deliver the message.\n      * \t\t<dl>\n      * \t\t\t<dt>0 Best effort (default).\n      *     \t\t\t<dt>1 At least once.\n      *     \t\t\t<dt>2 Exactly once.\n      * \t\t</dl>\n      * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n      *                     to both current and future subscriptions.\n      *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n      *                     A received message has the retained boolean set to true if the message was published\n      *                     with the retained boolean set to true\n      *                     and the subscrption was made after the message has been published.\n      * @throws {InvalidState} if the client is not connected.\n      */\n      this.publish = function (topic, payload, qos, retained) {\n        var message;\n        if (arguments.length === 0) {\n          throw new Error(\"Invalid argument.\" + \"length\");\n        } else if (arguments.length == 1) {\n          if (!(topic instanceof Message) && typeof topic !== \"string\") throw new Error(\"Invalid argument:\" + typeof topic);\n          message = topic;\n          if (typeof message.destinationName === \"undefined\") throw new Error(format(ERROR.INVALID_ARGUMENT, [message.destinationName, \"Message.destinationName\"]));\n          client.send(message);\n        } else {\n          //parameter checking in Message object\n          message = new Message(payload);\n          message.destinationName = topic;\n          if (arguments.length >= 3) message.qos = qos;\n          if (arguments.length >= 4) message.retained = retained;\n          client.send(message);\n        }\n      };\n\n      /**\n      * Normal disconnect of this Messaging client from its server.\n      *\n      * @name Paho.Client#disconnect\n      * @function\n      * @throws {InvalidState} if the client is already disconnected.\n      */\n      this.disconnect = function () {\n        client.disconnect();\n      };\n\n      /**\n      * Get the contents of the trace log.\n      *\n      * @name Paho.Client#getTraceLog\n      * @function\n      * @return {Object[]} tracebuffer containing the time ordered trace records.\n      */\n      this.getTraceLog = function () {\n        return client.getTraceLog();\n      };\n\n      /**\n      * Start tracing.\n      *\n      * @name Paho.Client#startTrace\n      * @function\n      */\n      this.startTrace = function () {\n        client.startTrace();\n      };\n\n      /**\n      * Stop tracing.\n      *\n      * @name Paho.Client#stopTrace\n      * @function\n      */\n      this.stopTrace = function () {\n        client.stopTrace();\n      };\n      this.isConnected = function () {\n        return client.connected;\n      };\n    };\n\n    /**\n    * An application message, sent or received.\n    * <p>\n    * All attributes may be null, which implies the default values.\n    *\n    * @name Paho.Message\n    * @constructor\n    * @param {String|ArrayBuffer} payload The message data to be sent.\n    * <p>\n    * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n    * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n    * <p>\n    * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n    *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n    *                    (for messages received by the onMessage function).\n    * <p>\n    * @property {number} qos The Quality of Service used to deliver the message.\n    * <dl>\n    *     <dt>0 Best effort (default).\n    *     <dt>1 At least once.\n    *     <dt>2 Exactly once.\n    * </dl>\n    * <p>\n    * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n    *                     to both current and future subscriptions.\n    *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n    *                     A received message has the retained boolean set to true if the message was published\n    *                     with the retained boolean set to true\n    *                     and the subscrption was made after the message has been published.\n    * <p>\n    * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n    *                     This is only set on messages received from the server.\n    *\n    */\n    var Message = function (newPayload) {\n      var payload;\n      if (typeof newPayload === \"string\" || newPayload instanceof ArrayBuffer || ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView)) {\n        payload = newPayload;\n      } else {\n        throw format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]);\n      }\n      var destinationName;\n      var qos = 0;\n      var retained = false;\n      var duplicate = false;\n      Object.defineProperties(this, {\n        \"payloadString\": {\n          enumerable: true,\n          get: function () {\n            if (typeof payload === \"string\") return payload;else return parseUTF8(payload, 0, payload.length);\n          }\n        },\n        \"payloadBytes\": {\n          enumerable: true,\n          get: function () {\n            if (typeof payload === \"string\") {\n              var buffer = new ArrayBuffer(UTF8Length(payload));\n              var byteStream = new Uint8Array(buffer);\n              stringToUTF8(payload, byteStream, 0);\n              return byteStream;\n            } else {\n              return payload;\n            }\n          }\n        },\n        \"destinationName\": {\n          enumerable: true,\n          get: function () {\n            return destinationName;\n          },\n          set: function (newDestinationName) {\n            if (typeof newDestinationName === \"string\") destinationName = newDestinationName;else throw new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n          }\n        },\n        \"qos\": {\n          enumerable: true,\n          get: function () {\n            return qos;\n          },\n          set: function (newQos) {\n            if (newQos === 0 || newQos === 1 || newQos === 2) qos = newQos;else throw new Error(\"Invalid argument:\" + newQos);\n          }\n        },\n        \"retained\": {\n          enumerable: true,\n          get: function () {\n            return retained;\n          },\n          set: function (newRetained) {\n            if (typeof newRetained === \"boolean\") retained = newRetained;else throw new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n          }\n        },\n        \"topic\": {\n          enumerable: true,\n          get: function () {\n            return destinationName;\n          },\n          set: function (newTopic) {\n            destinationName = newTopic;\n          }\n        },\n        \"duplicate\": {\n          enumerable: true,\n          get: function () {\n            return duplicate;\n          },\n          set: function (newDuplicate) {\n            duplicate = newDuplicate;\n          }\n        }\n      });\n    };\n\n    // Module contents.\n    return {\n      Client: Client,\n      Message: Message\n    };\n    // eslint-disable-next-line no-nested-ternary\n  }(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n  return PahoMQTT;\n});","map":{"version":3,"names":["ExportLibrary","root","factory","exports","module","define","amd","Paho","LibraryFactory","PahoMQTT","global","version","localStorage","data","setItem","key","item","getItem","removeItem","MESSAGE_TYPE","CONNECT","CONNACK","PUBLISH","PUBACK","PUBREC","PUBREL","PUBCOMP","SUBSCRIBE","SUBACK","UNSUBSCRIBE","UNSUBACK","PINGREQ","PINGRESP","DISCONNECT","validate","obj","keys","hasOwnProperty","Error","format","ERROR","INVALID_TYPE","errorStr","validKey","scope","f","apply","arguments","OK","code","text","CONNECT_TIMEOUT","SUBSCRIBE_TIMEOUT","UNSUBSCRIBE_TIMEOUT","PING_TIMEOUT","INTERNAL_ERROR","CONNACK_RETURNCODE","SOCKET_ERROR","SOCKET_CLOSE","MALFORMED_UTF","UNSUPPORTED","INVALID_STATE","INVALID_ARGUMENT","UNSUPPORTED_OPERATION","INVALID_STORED_DATA","INVALID_MQTT_MESSAGE_TYPE","MALFORMED_UNICODE","BUFFER_FULL","CONNACK_RC","error","substitutions","field","start","i","length","indexOf","part1","substring","part2","MqttProtoIdentifierv3","MqttProtoIdentifierv4","WireMessage","type","options","name","prototype","encode","first","remLength","topicStrLength","destinationNameLength","willMessagePayloadBytes","messageIdentifier","undefined","mqttVersion","UTF8Length","clientId","willMessage","destinationName","payloadBytes","Uint8Array","byteLength","userName","password","topics","requestedQos","payloadMessage","duplicate","qos","retained","ArrayBuffer","buffer","mbi","encodeMBI","pos","byteStream","set","writeString","connectFlags","cleanSession","writeUint16","keepAliveInterval","decodeMessage","input","startingPos","messageInfo","digit","multiplier","endPos","wireMessage","connectAcknowledgeFlags","sessionPresent","returnCode","len","readUint16","topicName","parseUTF8","message","Message","subarray","offset","utf8Length","stringToUTF8","number","output","Array","numBytes","charCode","charCodeAt","lowCharCode","isNaN","utf16","byte1","byte2","toString","byte3","byte4","String","fromCharCode","Pinger","client","_client","_keepAliveInterval","isReset","pingReq","doTimeout","pinger","doPing","_trace","_disconnected","socket","send","timeout","setTimeout","reset","clearTimeout","cancel","Timeout","timeoutSeconds","action","args","ClientImpl","uri","host","port","path","WebSocket","_wsuri","_localKey","_msg_queue","_buffered_msg_queue","_sentMessages","_receivedMessages","_notify_msg_sent","_message_identifier","_sequence","restore","connected","maxMessageIdentifier","connectOptions","hostIndex","onConnected","onConnectionLost","onMessageDelivered","onMessageArrived","traceFunction","_connectTimeout","sendPinger","receivePinger","_reconnectInterval","_reconnecting","_reconnectTimeout","disconnectedPublishing","disconnectedBufferSize","receiveBuffer","_traceBuffer","_MAX_TRACE_ENTRIES","connect","connectOptionsMasked","_traceMask","uris","_doConnect","subscribe","filter","subscribeOptions","constructor","onSuccess","grantedQos","invocationContext","onFailure","errorCode","errorMessage","timeOut","_requires_ack","_schedule_message","unsubscribe","unsubscribeOptions","callback","messageCount","Object","sequence","unshift","disconnect","getTraceLog","Date","startTrace","stopTrace","wsurl","useSSL","uriParts","split","join","binaryType","onopen","_on_socket_open","onmessage","_on_socket_message","onerror","_on_socket_error","onclose","_on_socket_close","_process_queue","store","prefix","storedMessage","pubRecReceived","hex","messageBytes","payloadHex","JSON","stringify","value","parse","x","parseInt","pop","_socket_send","event","messages","_deframeMessages","_handleMessage","byteArray","newData","result","push","errorStack","stack","sentMessage","receivedMessage","sequencedMessages","msgId","msg","sort","a","b","pubRelMessage","reconnected","_connected","_receivePublish","_receiveMessage","pubCompMessage","wireMessageMasked","pubAckMessage","pubRecMessage","reconnect","_reconnect","errorText","readyState","close","mqttVersionExplicit","slice","call","splice","record","severity","max","shift","traceObject","masked","traceObjectMasked","attr","Client","match","ipv6AddSBracket","clientIdLength","defineProperties","get","newOnConnected","newDisconnectedPublishing","newDisconnectedBufferSize","newOnConnectionLost","newOnMessageDelivered","newOnMessageArrived","trace","hosts","ports","stringPayload","usingURIs","test","ipv6","topic","payload","publish","isConnected","newPayload","isView","DataView","enumerable","newDestinationName","newQos","newRetained","newTopic","newDuplicate","self","window"],"sources":["/Users/thaitai/Desktop/Work/IoT/relay-web-app/node_modules/paho-mqtt/paho-mqtt.js"],"sourcesContent":["/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nvar client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  var message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n\tif(typeof exports === \"object\" && typeof module === \"object\"){\n\t\tmodule.exports = factory();\n\t} else if (typeof define === \"function\" && define.amd){\n\t\tdefine(factory);\n\t} else if (typeof exports === \"object\"){\n\t\texports = factory();\n\t} else {\n\t\t//if (typeof root.Paho === \"undefined\"){\n\t\t//\troot.Paho = {};\n\t\t//}\n\t\troot.Paho = factory();\n\t}\n})(this, function LibraryFactory(){\n\n\n\tvar PahoMQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module.\n\tvar version = \"@VERSION@-@BUILDLEVEL@\";\n\n\t/**\n\t * @private\n\t */\n\tvar localStorage = global.localStorage || (function () {\n\t\tvar data = {};\n\n\t\treturn {\n\t\t\tsetItem: function (key, item) { data[key] = item; },\n\t\t\tgetItem: function (key) { return data[key]; },\n\t\t\tremoveItem: function (key) { delete data[key]; },\n\t\t};\n\t})();\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar MESSAGE_TYPE = {\n\t\t\tCONNECT: 1,\n\t\t\tCONNACK: 2,\n\t\t\tPUBLISH: 3,\n\t\t\tPUBACK: 4,\n\t\t\tPUBREC: 5,\n\t\t\tPUBREL: 6,\n\t\t\tPUBCOMP: 7,\n\t\t\tSUBSCRIBE: 8,\n\t\t\tSUBACK: 9,\n\t\t\tUNSUBSCRIBE: 10,\n\t\t\tUNSUBACK: 11,\n\t\t\tPINGREQ: 12,\n\t\t\tPINGRESP: 13,\n\t\t\tDISCONNECT: 14\n\t\t};\n\n\t\t// Collection of utility methods used to simplify module code\n\t\t// and promote the DRY pattern.\n\n\t\t/**\n\t * Validate an object's parameter names to ensure they\n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj.\n\t * @throws {Error} Invalid option parameter found.\n\t * @private\n\t */\n\t\tvar validate = function(obj, keys) {\n\t\t\tfor (var key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\t\tfor (var validKey in keys)\n\t\t\t\t\t\t\tif (keys.hasOwnProperty(validKey))\n\t\t\t\t\t\t\t\terrorStr = errorStr+\" \"+validKey;\n\t\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope.\n\t * @param {function} User function\n\t * @param {object} Function scope\n\t * @return {function} User function bound to another scope\n\t * @private\n\t */\n\t\tvar scope = function (f, scope) {\n\t\t\treturn function () {\n\t\t\t\treturn f.apply(scope, arguments);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar ERROR = {\n\t\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"},\n\t\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t\t\tBUFFER_FULL: {code:18, text:\"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"},\n\t\t};\n\n\t\t/** CONNACK RC Meaning. */\n\t\tvar CONNACK_RC = {\n\t\t\t0:\"Connection Accepted\",\n\t\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t\t2:\"Connection Refused: identifier rejected\",\n\t\t\t3:\"Connection Refused: server unavailable\",\n\t\t\t4:\"Connection Refused: bad user name or password\",\n\t\t\t5:\"Connection Refused: not authorized\"\n\t\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\t\tvar format = function(error, substitutions) {\n\t\t\tvar text = error.text;\n\t\t\tif (substitutions) {\n\t\t\t\tvar field,start;\n\t\t\t\tfor (var i=0; i<substitutions.length; i++) {\n\t\t\t\t\tfield = \"{\"+i+\"}\";\n\t\t\t\t\tstart = text.indexOf(field);\n\t\t\t\t\tif(start > 0) {\n\t\t\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\t\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\t\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\n\t\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t *\n\t * Optional properties\n\t *\n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *\n\t * \"Flag\" properties\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\t\tvar WireMessage = function (type, options) {\n\t\t\tthis.type = type;\n\t\t\tfor (var name in options) {\n\t\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\t\tthis[name] = options[name];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\t\tvar first = ((this.type & 0x0f) << 4);\n\n\t\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\t\tvar remLength = 0;\n\t\t\tvar topicStrLength = [];\n\t\t\tvar destinationNameLength = 0;\n\t\t\tvar willMessagePayloadBytes;\n\n\t\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tremLength += 2;\n\n\t\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\twillMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now we can allocate a buffer for the message\n\n\t\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t\t//Write the fixed header into the buffer\n\t\t\tbyteStream[0] = first;\n\t\t\tbyteStream.set(mbi,1);\n\n\t\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\n\t\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar connectFlags = 0;\n\t\t\t\tif (this.cleanSession)\n\t\t\t\t\tconnectFlags = 0x02;\n\t\t\t\tif (this.willMessage !== undefined ) {\n\t\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tconnectFlags |= 0x80;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tconnectFlags |= 0x40;\n\t\t\t\tbyteStream[pos++] = connectFlags;\n\t\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t\t}\n\n\t\t\t// Output the messageIdentifier - if there is one\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\n\t\t\t\tbreak;\n\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREC:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREL:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t};\n\n\t\tfunction decodeMessage(input,pos) {\n\t\t\tvar startingPos = pos;\n\t\t\tvar first = input[pos];\n\t\t\tvar type = first >> 4;\n\t\t\tvar messageInfo = first &= 0x0f;\n\t\t\tpos += 1;\n\n\n\t\t\t// Decode the remaining length (MBI format)\n\n\t\t\tvar digit;\n\t\t\tvar remLength = 0;\n\t\t\tvar multiplier = 1;\n\t\t\tdo {\n\t\t\t\tif (pos == input.length) {\n\t\t\t\t\treturn [null,startingPos];\n\t\t\t\t}\n\t\t\t\tdigit = input[pos++];\n\t\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\t\tmultiplier *= 128;\n\t\t\t} while ((digit & 0x80) !== 0);\n\n\t\t\tvar endPos = pos+remLength;\n\t\t\tif (endPos > input.length) {\n\t\t\t\treturn [null,startingPos];\n\t\t\t}\n\n\t\t\tvar wireMessage = new WireMessage(type);\n\t\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\n\t\t\t\tvar message = new Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01)\n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\n\t\t\tcase  MESSAGE_TYPE.PUBREL:\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn [wireMessage,endPos];\n\t\t}\n\n\t\tfunction writeUint16(input, buffer, offset) {\n\t\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\t\tbuffer[offset++] = input % 256;     //LSB\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\t\tstringToUTF8(input, buffer, offset);\n\t\t\treturn offset + utf8Length;\n\t\t}\n\n\t\tfunction readUint16(buffer, offset) {\n\t\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t\t}\n\n\t\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private\n\t */\n\t\tfunction encodeMBI(number) {\n\t\t\tvar output = new Array(1);\n\t\t\tvar numBytes = 0;\n\n\t\t\tdo {\n\t\t\t\tvar digit = number % 128;\n\t\t\t\tnumber = number >> 7;\n\t\t\t\tif (number > 0) {\n\t\t\t\t\tdigit |= 0x80;\n\t\t\t\t}\n\t\t\t\toutput[numBytes++] = digit;\n\t\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\t\tfunction UTF8Length(input) {\n\t\t\tvar output = 0;\n\t\t\tfor (var i = 0; i<input.length; i++)\n\t\t\t{\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t{\n\t\t\t\t\t// Surrogate pair means its a 4 byte character\n\t\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\toutput++;\n\t\t\t\t\t}\n\t\t\t\t\toutput +=3;\n\t\t\t\t}\n\t\t\t\telse if (charCode > 0x7F)\n\t\t\t\t\toutput +=2;\n\t\t\t\telse\n\t\t\t\t\toutput++;\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\t\tfunction stringToUTF8(input, output, start) {\n\t\t\tvar pos = start;\n\t\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\n\t\t\t\t// Check for a surrogate pair.\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t\t}\n\t\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\n\t\t\t\t}\n\n\t\t\t\tif (charCode <= 0x7F) {\n\t\t\t\t\toutput[pos++] = charCode;\n\t\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else if (charCode <= 0xFFFF) {\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else {\n\t\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\tfunction parseUTF8(input, offset, length) {\n\t\t\tvar output = \"\";\n\t\t\tvar utf16;\n\t\t\tvar pos = offset;\n\n\t\t\twhile (pos < offset+length)\n\t\t\t{\n\t\t\t\tvar byte1 = input[pos++];\n\t\t\t\tif (byte1 < 128)\n\t\t\t\t\tutf16 = byte1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\t\tif (byte2 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\t\tif (byte3 < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar byte4 = input[pos++]-128;\n\t\t\t\t\t\t\tif (byte4 < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\tif (byte1 < 0xF8)        // 4 byte character\n\t\t\t\t\t\t\t\tutf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t\t\telse                     // longer encodings are not supported\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t{\n\t\t\t\t\tutf16 -= 0x10000;\n\t\t\t\t\toutput += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\tutf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t}\n\t\t\t\toutput += String.fromCharCode(utf16);\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\t\tvar Pinger = function(client, keepAliveInterval) {\n\t\t\tthis._client = client;\n\t\t\tthis._keepAliveInterval = keepAliveInterval*1000;\n\t\t\tthis.isReset = false;\n\n\t\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n\t\t\tvar doTimeout = function (pinger) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn doPing.apply(pinger);\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/** @ignore */\n\t\t\tvar doPing = function() {\n\t\t\t\tif (!this.isReset) {\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t\t} else {\n\t\t\t\t\tthis.isReset = false;\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\t\tthis._client.socket.send(pingReq);\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.reset = function() {\n\t\t\t\tthis.isReset = true;\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t};\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\t\tvar Timeout = function(client, timeoutSeconds, action, args) {\n\t\t\tif (!timeoutSeconds)\n\t\t\t\ttimeoutSeconds = 30;\n\n\t\t\tvar doTimeout = function (action, client, args) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn action.apply(client, args);\n\t\t\t\t};\n\t\t\t};\n\t\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t/**\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t *\n\t * @name Paho.ClientImpl @constructor\n\t * @param {String} host the DNS nameof the webSocket host.\n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\t\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\t\tif (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t\t}\n\t\t\tif (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t\t}\n\t\t\tthis._trace(\"Paho.Client\", uri, host, port, path, clientId);\n\n\t\t\tthis.host = host;\n\t\t\tthis.port = port;\n\t\t\tthis.path = path;\n\t\t\tthis.uri = uri;\n\t\t\tthis.clientId = clientId;\n\t\t\tthis._wsuri = null;\n\n\t\t\t// Local storagekeys are qualified with the following string.\n\t\t\t// The conditional inclusion of path in the key is for backward\n\t\t\t// compatibility to when the path was not configurable and assumed to\n\t\t\t// be /mqtt\n\t\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t\t// Create private instance-only message queue\n\t\t\t// Internal queue of messages to be sent, in sending order.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\n\t\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\t\t\tthis._sentMessages = {};\n\n\t\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t\t// indexed by their respective message ids.\n\t\t\tthis._receivedMessages = {};\n\n\t\t\t// Internal list of callbacks to be executed when messages\n\t\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\t// Unique identifier for SEND messages, incrementing\n\t\t\t// counter as messages are sent.\n\t\t\tthis._message_identifier = 1;\n\n\t\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\t\tthis._sequence = 0;\n\n\n\t\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.\n\t\t\tfor (var key in localStorage)\n\t\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) === 0 || key.indexOf(\"Received:\"+this._localKey) === 0)\n\t\t\t\t\tthis.restore(key);\n\t\t};\n\n\t\t// Messaging Client public instance members.\n\t\tClientImpl.prototype.host = null;\n\t\tClientImpl.prototype.port = null;\n\t\tClientImpl.prototype.path = null;\n\t\tClientImpl.prototype.uri = null;\n\t\tClientImpl.prototype.clientId = null;\n\n\t\t// Messaging Client private instance members.\n\t\tClientImpl.prototype.socket = null;\n\t\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\t\tClientImpl.prototype.connected = false;\n\t\t/* The largest message identifier allowed, may not be larger than 2**16 but\n\t\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t\t */\n\t\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\t\tClientImpl.prototype.connectOptions = null;\n\t\tClientImpl.prototype.hostIndex = null;\n\t\tClientImpl.prototype.onConnected = null;\n\t\tClientImpl.prototype.onConnectionLost = null;\n\t\tClientImpl.prototype.onMessageDelivered = null;\n\t\tClientImpl.prototype.onMessageArrived = null;\n\t\tClientImpl.prototype.traceFunction = null;\n\t\tClientImpl.prototype._msg_queue = null;\n\t\tClientImpl.prototype._buffered_msg_queue = null;\n\t\tClientImpl.prototype._connectTimeout = null;\n\t\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\t\tClientImpl.prototype.sendPinger = null;\n\t\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\t\tClientImpl.prototype.receivePinger = null;\n\t\tClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n\t\tClientImpl.prototype._reconnecting = false;\n\t\tClientImpl.prototype._reconnectTimeout = null;\n\t\tClientImpl.prototype.disconnectedPublishing = false;\n\t\tClientImpl.prototype.disconnectedBufferSize = 5000;\n\n\t\tClientImpl.prototype.receiveBuffer = null;\n\n\t\tClientImpl.prototype._traceBuffer = null;\n\t\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\t\tClientImpl.prototype.connect = function (connectOptions) {\n\t\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\t\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n\t\t\tif (this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\tif (this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// connect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process to use new connect options.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tthis.connectOptions = connectOptions;\n\t\t\tthis._reconnectInterval = 1;\n\t\t\tthis._reconnecting = false;\n\t\t\tif (connectOptions.uris) {\n\t\t\t\tthis.hostIndex = 0;\n\t\t\t\tthis._doConnect(connectOptions.uris[0]);\n\t\t\t} else {\n\t\t\t\tthis._doConnect(this.uri);\n\t\t\t}\n\n\t\t};\n\n\t\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n            if (subscribeOptions.qos === undefined)\n                subscribeOptions.qos = 0;\n            wireMessage.requestedQos = [];\n            for (var i = 0; i < wireMessage.topics.length; i++)\n                wireMessage.requestedQos[i] = subscribeOptions.qos;\n\n\t\t\tif (subscribeOptions.onSuccess) {\n\t\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.onFailure) {\n\t\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode, errorMessage:format(errorCode)});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:subscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All subscriptions return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {\n\t\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n\n\t\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t\t}\n\t\t\tif (unsubscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All unsubscribes return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.send = function (message) {\n\t\t\tthis._trace(\"Client.send\", message);\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\t\twireMessage.payloadMessage = message;\n\n\t\t\tif (this.connected) {\n\t\t\t// Mark qos 1 & 2 message as \"ACK required\"\n\t\t\t// For qos 0 message, invoke onMessageDelivered callback if there is one.\n\t\t\t// Then schedule the message.\n\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t} else if (this.onMessageDelivered) {\n\t\t\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tthis._schedule_message(wireMessage);\n\t\t\t} else {\n\t\t\t// Currently disconnected, will not schedule this message\n\t\t\t// Check if reconnecting is in progress and disconnected publish is enabled.\n\t\t\t\tif (this._reconnecting && this.disconnectedPublishing) {\n\t\t\t\t// Check the limit which include the \"required ACK\" messages\n\t\t\t\t\tvar messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n\t\t\t\t\tif (messageCount > this.disconnectedBufferSize) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\t\t// Mark this message as \"ACK required\"\n\t\t\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\t\t\t\t\tthis._buffered_msg_queue.unshift(wireMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.disconnect = function () {\n\t\t\tthis._trace(\"Client.disconnect\");\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// disconnect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tif (!this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t\t// in case of a failure later on in the disconnect processing.\n\t\t\t// as a consequence, the _disconected call back may be run several times.\n\t\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.getTraceLog = function () {\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\t\tfor (var key in this._sentMessages)\n\t\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\n\t\t\t\treturn this._traceBuffer;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.startTrace = function () {\n\t\t\tif ( this._traceBuffer === null ) {\n\t\t\t\tthis._traceBuffer = [];\n\t\t\t}\n\t\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t\t};\n\n\t\tClientImpl.prototype.stopTrace = function () {\n\t\t\tdelete this._traceBuffer;\n\t\t};\n\n\t\tClientImpl.prototype._doConnect = function (wsurl) {\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n\t\t\tif (this.connectOptions.useSSL) {\n\t\t\t\tvar uriParts = wsurl.split(\":\");\n\t\t\t\turiParts[0] = \"wss\";\n\t\t\t\twsurl = uriParts.join(\":\");\n\t\t\t}\n\t\t\tthis._wsuri = wsurl;\n\t\t\tthis.connected = false;\n\n\n\n\t\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t\t} else {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t\t}\n\t\t\tthis.socket.binaryType = \"arraybuffer\";\n\t\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\n\t\t\tthis.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tthis.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\t\t\tthis._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t\t};\n\n\n\t\t// Schedule a new message to be sent over the WebSockets\n\t\t// connection. CONNECT messages cause WebSocket connection\n\t\t// to be started. All other messages are queued internally\n\t\t// until this has happened. When WS connection starts, process\n\t\t// all outstanding messages.\n\t\tClientImpl.prototype._schedule_message = function (message) {\n\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\tthis._msg_queue.unshift(message);\n\t\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\t\t\tif (this.connected) {\n\t\t\t\tthis._process_queue();\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif(wireMessage.pubRecReceived)\n\t\t\t\t\tstoredMessage.pubRecReceived = true;\n\n\t\t\t\t// Convert the payload to a hex string.\n\t\t\t\tstoredMessage.payloadMessage = {};\n\t\t\t\tvar hex = \"\";\n\t\t\t\tvar messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t\tfor (var i=0; i<messageBytes.length; i++) {\n\t\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t\t\thex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\t\telse\n\t\t\t\t\t\thex = hex+messageBytes[i].toString(16);\n\t\t\t\t}\n\t\t\t\tstoredMessage.payloadMessage.payloadHex = hex;\n\n\t\t\t\tstoredMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t\tstoredMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t\tif (wireMessage.payloadMessage.duplicate)\n\t\t\t\t\tstoredMessage.payloadMessage.duplicate = true;\n\t\t\t\tif (wireMessage.payloadMessage.retained)\n\t\t\t\t\tstoredMessage.payloadMessage.retained = true;\n\n\t\t\t\t// Add a sequence number to sent messages.\n\t\t\t\tif ( prefix.indexOf(\"Sent:\") === 0 ) {\n\t\t\t\t\tif ( wireMessage.sequence === undefined )\n\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\tstoredMessage.sequence = wireMessage.sequence;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [prefix+this._localKey+wireMessage.messageIdentifier, storedMessage]));\n\t\t\t}\n\t\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t\t};\n\n\t\tClientImpl.prototype.restore = function(key) {\n\t\t\tvar value = localStorage.getItem(key);\n\t\t\tvar storedMessage = JSON.parse(value);\n\n\t\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n\t\t\tswitch(storedMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// Replace the payload message with a Message object.\n\t\t\t\tvar hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t\tvar buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (hex.length >= 2) {\n\t\t\t\t\tvar x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t\thex = hex.substring(2, hex.length);\n\t\t\t\t\tbyteStream[i++] = x;\n\t\t\t\t}\n\t\t\t\tvar payloadMessage = new Message(byteStream);\n\n\t\t\t\tpayloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t\tpayloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t\tif (storedMessage.payloadMessage.duplicate)\n\t\t\t\t\tpayloadMessage.duplicate = true;\n\t\t\t\tif (storedMessage.payloadMessage.retained)\n\t\t\t\t\tpayloadMessage.retained = true;\n\t\t\t\twireMessage.payloadMessage = payloadMessage;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t\t}\n\n\t\t\tif (key.indexOf(\"Sent:\"+this._localKey) === 0) {\n\t\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t} else if (key.indexOf(\"Received:\"+this._localKey) === 0) {\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._process_queue = function () {\n\t\t\tvar message = null;\n\n\t\t\t// Send all queued messages down socket connection\n\t\t\twhile ((message = this._msg_queue.pop())) {\n\t\t\t\tthis._socket_send(message);\n\t\t\t\t// Notify listeners that message was successfully sent\n\t\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\t\tthis._message_identifier++;\n\t\t\t}\n\t\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t\t}\n\t\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\t\tthis._message_identifier = 1;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_open = function () {\n\t\t// Create the CONNECT message object.\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n\t\t\twireMessage.clientId = this.clientId;\n\t\t\tthis._socket_send(wireMessage);\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_message = function (event) {\n\t\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t\tvar messages = this._deframeMessages(event.data);\n\t\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t\t\tthis._handleMessage(messages[i]);\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._deframeMessages = function(data) {\n\t\t\tvar byteArray = new Uint8Array(data);\n\t\t\tvar messages = [];\n\t\t\tif (this.receiveBuffer) {\n\t\t\t\tvar newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t\t\t\tnewData.set(this.receiveBuffer);\n\t\t\t\tnewData.set(byteArray,this.receiveBuffer.length);\n\t\t\t\tbyteArray = newData;\n\t\t\t\tdelete this.receiveBuffer;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvar offset = 0;\n\t\t\t\twhile(offset < byteArray.length) {\n\t\t\t\t\tvar result = decodeMessage(byteArray,offset);\n\t\t\t\t\tvar wireMessage = result[0];\n\t\t\t\t\toffset = result[1];\n\t\t\t\t\tif (wireMessage !== null) {\n\t\t\t\t\t\tmessages.push(wireMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offset < byteArray.length) {\n\t\t\t\t\tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn messages;\n\t\t};\n\n\t\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\n\t\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\t\ttry {\n\t\t\t\tswitch(wireMessage.type) {\n\t\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\tif (this._reconnectTimeout)\n\t\t\t\t\t\tthis._reconnectTimeout.cancel();\n\n\t\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\t\tfor (var key in this._sentMessages) {\n\t\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t\t}\n\t\t\t\t\t// Client connected and ready for business.\n\t\t\t\t\tif (wireMessage.returnCode === 0) {\n\n\t\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\n\t\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resend messages.\n\t\t\t\t\tvar sequencedMessages = [];\n\t\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Also schedule qos 0 buffered messages if any\n\t\t\t\t\tif (this._buffered_msg_queue.length > 0) {\n\t\t\t\t\t\tvar msg = null;\n\t\t\t\t\t\twhile ((msg = this._buffered_msg_queue.pop())) {\n\t\t\t\t\t\t\tsequencedMessages.push(msg);\n\t\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\t\tthis._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\t\t// Will also now return if this connection was the result of an automatic\n\t\t\t\t\t// reconnect and which URI was successfully connected to.\n\t\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar reconnected = false;\n\t\t\t\t\tif (this._reconnecting) {\n\t\t\t\t\t\treconnected = true;\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnecting = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the onConnected callback if there is one.\n\t\t\t\t\tthis._connected(reconnected, this._wsuri);\n\n\t\t\t\t\t// Process all queued messages now that the connection is established.\n\t\t\t\t\tthis._process_queue();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (receivedMessage) {\n\t\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis._schedule_message(pubCompMessage);\n\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\t// This will need to be fixed when we add multiple topic support\n\t\t\t\t\t\tif (wireMessage.returnCode[0] === 0x80) {\n\t\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\t\tthis.sendPinger.reset();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_error = function (error) {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_close = function () {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._socket_send = function (wireMessage) {\n\n\t\t\tif (wireMessage.type == 1) {\n\t\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\t\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t\t}\n\t\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\n\t\t\tthis.socket.send(wireMessage.encode());\n\t\t\t/* We have proved to the server we are alive. */\n\t\t\tthis.sendPinger.reset();\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\t\tif (this.onMessageArrived) {\n\t\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has connected.\n\t * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n\t * @param {uri} [string] fully qualified WebSocket URI of the server.\n\t */\n\t\tClientImpl.prototype._connected = function (reconnect, uri) {\n\t\t// Execute the onConnected callback if there is one.\n\t\t\tif (this.onConnected)\n\t\t\t\tthis.onConnected(reconnect, uri);\n\t\t};\n\n\t\t/**\n\t * Attempts to reconnect the client to the server.\n   * For each reconnect attempt, will double the reconnect interval\n   * up to 128 seconds.\n\t */\n\t\tClientImpl.prototype._reconnect = function () {\n\t\t\tthis._trace(\"Client._reconnect\");\n\t\t\tif (!this.connected) {\n\t\t\t\tthis._reconnecting = true;\n\t\t\t\tthis.sendPinger.cancel();\n\t\t\t\tthis.receivePinger.cancel();\n\t\t\t\tif (this._reconnectInterval < 128)\n\t\t\t\t\tthis._reconnectInterval = this._reconnectInterval * 2;\n\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\n\t\t\tif (errorCode !== undefined && this._reconnecting) {\n\t\t\t\t//Continue automatic reconnect process\n\t\t\t\tthis._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendPinger.cancel();\n\t\t\tthis.receivePinger.cancel();\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\n\t\t\t// Clear message buffers.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\t\tthis.socket.onopen = null;\n\t\t\t\tthis.socket.onmessage = null;\n\t\t\t\tthis.socket.onerror = null;\n\t\t\t\tthis.socket.onclose = null;\n\t\t\t\tif (this.socket.readyState === 1)\n\t\t\t\t\tthis.socket.close();\n\t\t\t\tdelete this.socket;\n\t\t\t}\n\n\t\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\t\tthis.hostIndex++;\n\t\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\t} else {\n\n\t\t\t\tif (errorCode === undefined) {\n\t\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t\t}\n\n\t\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.connected = false;\n\t\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.\n\t\t\t\t\tif (this.onConnectionLost) {\n\t\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText, reconnect:this.connectOptions.reconnect, uri:this._wsuri});\n\t\t\t\t\t}\n\t\t\t\t\tif (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n\t\t\t\t\t// Start automatic reconnect process for the very first time since last successful connect.\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnect();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\");\n\t\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\t\tif (this.traceFunction) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tfor (var i in args)\n\t\t\t\t{\n\t\t\t\t\tif (typeof args[i] !== \"undefined\")\n\t\t\t\t\t\targs.splice(i, 1, JSON.stringify(args[i]));\n\t\t\t\t}\n\t\t\t\tvar record = args.join(\"\");\n\t\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t\t}\n\n\t\t\t//buffer style trace\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {\n\t\t\t\t\t\tthis._traceBuffer.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\t\tvar traceObjectMasked = {};\n\t\t\tfor (var attr in traceObject) {\n\t\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\t\tif (attr == masked)\n\t\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn traceObjectMasked;\n\t\t};\n\n\t\t// ------------------------------------------------------------------------\n\t\t// Public Programming interface.\n\t\t// ------------------------------------------------------------------------\n\n\t\t/**\n\t * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish.\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n\t * (even though the underlying protocol exchange might be synchronous in nature).\n\t * This means they signal their completion by calling back to the application,\n\t * via Success or Failure callback functions provided by the application on the method in question.\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n\t * that are defined on the {@link Paho.Client} object.\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n\t *\n\t * @name Paho.Client\n\t *\n\t * @constructor\n\t *\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t *\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost.\n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network\n\t *                            cause the client to be disconnected. The disconnect call back may be called without\n\t *                            the connectionComplete call back being invoked if, for example the client fails to\n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>\n\t *                            <li>errorCode\n\t *                            <li>errorMessage\n\t *                            </ol>\n\t * @property {function} onMessageDelivered - called when a message has been delivered.\n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked.\n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that was delivered.\n\t *                            </ol>\n\t * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that has arrived.\n\t *                            </ol>\n\t * @property {function} onConnected - called when a connection is successfully made to the server.\n\t *                                  after a connect() method.\n\t *                                  Parameters passed to the onConnected callback are:\n\t *                                  <ol>\n\t *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n\t *                                  <li>URI (string) - The URI used to connect to the server.</li>\n\t *                                  </ol>\n\t * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n\t *                                            in the event that the connection to the server is lost.\n\t * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n\t *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n\t * @property {function} trace - called whenever trace is called. TODO\n\t */\n\t\tvar Client = function (host, port, path, clientId) {\n\n\t\t\tvar uri;\n\n\t\t\tif (typeof host !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t// host: must be full ws:// uri\n\t\t\t// port: clientId\n\t\t\t\tclientId = port;\n\t\t\t\turi = host;\n\t\t\t\tvar match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t\t\t\tif (match) {\n\t\t\t\t\thost = match[4]||match[2];\n\t\t\t\t\tport = parseInt(match[7]);\n\t\t\t\t\tpath = match[8];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (arguments.length == 3) {\n\t\t\t\t\tclientId = path;\n\t\t\t\t\tpath = \"/mqtt\";\n\t\t\t\t}\n\t\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\t\tif (typeof path !== \"string\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\n\t\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") !== -1 && host.slice(0,1) !== \"[\" && host.slice(-1) !== \"]\");\n\t\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t}\n\n\t\t\tvar clientIdLength = 0;\n\t\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\t\tvar charCode = clientId.charCodeAt(i);\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {\n\t\t\t\t\ti++; // Surrogate pair.\n\t\t\t\t}\n\t\t\t\tclientIdLength++;\n\t\t\t}\n\t\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n\n\t\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\n\t\t\t//Public Properties\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"host\":{\n\t\t\t\t\tget: function() { return host; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"port\":{\n\t\t\t\t\tget: function() { return port; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"path\":{\n\t\t\t\t\tget: function() { return path; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"uri\":{\n\t\t\t\t\tget: function() { return uri; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"clientId\":{\n\t\t\t\t\tget: function() { return client.clientId; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"onConnected\":{\n\t\t\t\t\tget: function() { return client.onConnected; },\n\t\t\t\t\tset: function(newOnConnected) {\n\t\t\t\t\t\tif (typeof newOnConnected === \"function\")\n\t\t\t\t\t\t\tclient.onConnected = newOnConnected;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedPublishing\":{\n\t\t\t\t\tget: function() { return client.disconnectedPublishing; },\n\t\t\t\t\tset: function(newDisconnectedPublishing) {\n\t\t\t\t\t\tclient.disconnectedPublishing = newDisconnectedPublishing;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedBufferSize\":{\n\t\t\t\t\tget: function() { return client.disconnectedBufferSize; },\n\t\t\t\t\tset: function(newDisconnectedBufferSize) {\n\t\t\t\t\t\tclient.disconnectedBufferSize = newDisconnectedBufferSize;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onConnectionLost\":{\n\t\t\t\t\tget: function() { return client.onConnectionLost; },\n\t\t\t\t\tset: function(newOnConnectionLost) {\n\t\t\t\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageDelivered\":{\n\t\t\t\t\tget: function() { return client.onMessageDelivered; },\n\t\t\t\t\tset: function(newOnMessageDelivered) {\n\t\t\t\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageArrived\":{\n\t\t\t\t\tget: function() { return client.onMessageArrived; },\n\t\t\t\t\tset: function(newOnMessageArrived) {\n\t\t\t\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"trace\":{\n\t\t\t\t\tget: function() { return client.traceFunction; },\n\t\t\t\t\tset: function(trace) {\n\t\t\t\t\t\tif(typeof trace === \"function\"){\n\t\t\t\t\t\t\tclient.traceFunction = trace;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t/**\n\t\t * Connect this Messaging client to its server.\n\t\t *\n\t\t * @name Paho.Client#connect\n\t\t * @function\n\t\t * @param {object} connectOptions - Attributes used with the connection.\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n\t\t * </ol>\n\t * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.\n\t\t * </ol>\n\t * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n\t * to the server if the connection is lost.\n\t *<ul>\n\t *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n\t * connection is lost.</li>\n\t *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n\t * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n\t * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n\t *</ul>\n\t * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n\t *<ul>\n\t *<li>3 - MQTT V3.1</li>\n\t *<li>4 - MQTT V3.1.1</li>\n\t *</ul>\n\t * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n\t * selected MQTT Version or will fail to connect.\n\t * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n\t * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n\t * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n\t * the hosts array will be converted to uris and will overwrite this property.\n\t\t * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\t\tthis.connect = function (connectOptions) {\n\t\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\tuserName:\"string\",\n\t\t\t\t\tpassword:\"string\",\n\t\t\t\t\twillMessage:\"object\",\n\t\t\t\t\tkeepAliveInterval:\"number\",\n\t\t\t\t\tcleanSession:\"boolean\",\n\t\t\t\t\tuseSSL:\"boolean\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\thosts:\"object\",\n\t\t\t\t\tports:\"object\",\n\t\t\t\t\treconnect:\"boolean\",\n\t\t\t\t\tmqttVersion:\"number\",\n\t\t\t\t\tmqttVersionExplicit:\"boolean\",\n\t\t\t\t\turis: \"object\"});\n\n\t\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t\t}\n\n\t\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t\t}\n\n\t\t\t\t//Check that if password is set, so is username\n\t\t\t\tif (connectOptions.password !== undefined && connectOptions.userName === undefined)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n\n\t\t\t\tif (connectOptions.willMessage) {\n\t\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\t\tconnectOptions.willMessage.stringPayload = null;\n\n\t\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t\t}\n\t\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\t\tif (connectOptions.hosts) {\n\n\t\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\n\t\t\t\t\tvar usingURIs = false;\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!usingURIs) {\n\t\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (connectOptions.hosts.length !== connectOptions.ports.length)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\n\t\t\t\t\t\tconnectOptions.uris = [];\n\n\t\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\n\t\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") !== -1);\n\t\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclient.connect(connectOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.\n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.\n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\t\tvalidate(subscribeOptions,  {qos:\"number\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t\t\t\t\t\t\t\t\t\t  or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the\n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.\n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t *\n\t\t * @name Paho.Client#send\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.send = function (topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Publish a message to the consumers of the destination in the Message.\n\t\t * Synonym for Paho.Mqtt.Client#send\n\t\t *\n\t\t * @name Paho.Client#publish\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be published.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.publish = function(topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t *\n\t\t * @name Paho.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.\n\t\t */\n\t\t\tthis.disconnect = function () {\n\t\t\t\tclient.disconnect();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Get the contents of the trace log.\n\t\t *\n\t\t * @name Paho.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\t\tthis.getTraceLog = function () {\n\t\t\t\treturn client.getTraceLog();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Start tracing.\n\t\t *\n\t\t * @name Paho.Client#startTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.startTrace = function () {\n\t\t\t\tclient.startTrace();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Stop tracing.\n\t\t *\n\t\t * @name Paho.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.stopTrace = function () {\n\t\t\t\tclient.stopTrace();\n\t\t\t};\n\n\t\t\tthis.isConnected = function() {\n\t\t\t\treturn client.connected;\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t *\n\t * @name Paho.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.\n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t *                     A received message has the retained boolean set to true if the message was published\n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published.\n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n\t *                     This is only set on messages received from the server.\n\t *\n\t */\n\t\tvar Message = function (newPayload) {\n\t\t\tvar payload;\n\t\t\tif (   typeof newPayload === \"string\" ||\n\t\tnewPayload instanceof ArrayBuffer ||\n\t\t(ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView))\n\t\t\t) {\n\t\t\t\tpayload = newPayload;\n\t\t\t} else {\n\t\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t\t}\n\n\t\t\tvar destinationName;\n\t\t\tvar qos = 0;\n\t\t\tvar retained = false;\n\t\t\tvar duplicate = false;\n\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"payloadString\":{\n\t\t\t\t\tenumerable : true,\n\t\t\t\t\tget : function () {\n\t\t\t\t\t\tif (typeof payload === \"string\")\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn parseUTF8(payload, 0, payload.length);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"payloadBytes\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tif (typeof payload === \"string\") {\n\t\t\t\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\t\t\t\treturn byteStream;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"destinationName\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newDestinationName) {\n\t\t\t\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\t\t\t\tdestinationName = newDestinationName;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"qos\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return qos; },\n\t\t\t\t\tset: function(newQos) {\n\t\t\t\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\t\t\t\tqos = newQos;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"retained\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return retained; },\n\t\t\t\t\tset: function(newRetained) {\n\t\t\t\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\t\t\t\tretained = newRetained;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"topic\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newTopic) {destinationName=newTopic;}\n\t\t\t\t},\n\t\t\t\t\"duplicate\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return duplicate; },\n\t\t\t\t\tset: function(newDuplicate) {duplicate=newDuplicate;}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Module contents.\n\t\treturn {\n\t\t\tClient: Client,\n\t\t\tMessage: Message\n\t\t};\n\t// eslint-disable-next-line no-nested-ternary\n\t})(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\treturn PahoMQTT;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}