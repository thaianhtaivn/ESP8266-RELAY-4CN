{"ast":null,"code":"'use strict';\n\nvar debug = require('debug')('mqttjs:ws');\nvar websocket = require('websocket-stream');\nvar urlModule = require('url');\nvar WSS_OPTIONS = ['rejectUnauthorized', 'ca', 'cert', 'key', 'pfx', 'passphrase'];\nvar IS_BROWSER = process.title === 'browser';\nfunction buildUrl(opts, client) {\n  var url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path;\n  if (typeof opts.transformWsUrl === 'function') {\n    url = opts.transformWsUrl(url, opts, client);\n  }\n  return url;\n}\nfunction setDefaultOpts(opts) {\n  if (!opts.hostname) {\n    opts.hostname = 'localhost';\n  }\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      opts.port = 443;\n    } else {\n      opts.port = 80;\n    }\n  }\n  if (!opts.path) {\n    opts.path = '/';\n  }\n  if (!opts.wsOptions) {\n    opts.wsOptions = {};\n  }\n  if (!IS_BROWSER && opts.protocol === 'wss') {\n    // Add cert/key/ca etc options\n    WSS_OPTIONS.forEach(function (prop) {\n      if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {\n        opts.wsOptions[prop] = opts[prop];\n      }\n    });\n  }\n}\nfunction createWebSocket(client, opts) {\n  debug('createWebSocket');\n  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  setDefaultOpts(opts);\n  var url = buildUrl(opts, client);\n  debug('url %s protocol %s', url, websocketSubProtocol);\n  return websocket(url, [websocketSubProtocol], opts.wsOptions);\n}\nfunction streamBuilder(client, opts) {\n  return createWebSocket(client, opts);\n}\nfunction browserStreamBuilder(client, opts) {\n  debug('browserStreamBuilder');\n  if (!opts.hostname) {\n    opts.hostname = opts.host;\n  }\n  if (!opts.hostname) {\n    // Throwing an error in a Web Worker if no `hostname` is given, because we\n    // can not determine the `hostname` automatically.  If connecting to\n    // localhost, please supply the `hostname` as an argument.\n    if (typeof document === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.');\n    }\n    var parsed = urlModule.parse(document.URL);\n    opts.hostname = parsed.hostname;\n    if (!opts.port) {\n      opts.port = parsed.port;\n    }\n  }\n  return createWebSocket(client, opts);\n}\nif (IS_BROWSER) {\n  module.exports = browserStreamBuilder;\n} else {\n  module.exports = streamBuilder;\n}","map":{"version":3,"names":["debug","require","websocket","urlModule","WSS_OPTIONS","IS_BROWSER","process","title","buildUrl","opts","client","url","protocol","hostname","port","path","transformWsUrl","setDefaultOpts","wsOptions","forEach","prop","hasOwnProperty","createWebSocket","websocketSubProtocol","protocolId","protocolVersion","streamBuilder","browserStreamBuilder","host","document","Error","parsed","parse","URL","module","exports"],"sources":["/Users/thaitai/Desktop/Work/IoT/relay-web-app/node_modules/mqtt/lib/connect/ws.js"],"sourcesContent":["'use strict'\n\nvar debug = require('debug')('mqttjs:ws')\nvar websocket = require('websocket-stream')\nvar urlModule = require('url')\nvar WSS_OPTIONS = [\n  'rejectUnauthorized',\n  'ca',\n  'cert',\n  'key',\n  'pfx',\n  'passphrase'\n]\nvar IS_BROWSER = process.title === 'browser'\n\nfunction buildUrl (opts, client) {\n  var url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path\n  if (typeof (opts.transformWsUrl) === 'function') {\n    url = opts.transformWsUrl(url, opts, client)\n  }\n  return url\n}\n\nfunction setDefaultOpts (opts) {\n  if (!opts.hostname) {\n    opts.hostname = 'localhost'\n  }\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      opts.port = 443\n    } else {\n      opts.port = 80\n    }\n  }\n  if (!opts.path) {\n    opts.path = '/'\n  }\n\n  if (!opts.wsOptions) {\n    opts.wsOptions = {}\n  }\n  if (!IS_BROWSER && opts.protocol === 'wss') {\n    // Add cert/key/ca etc options\n    WSS_OPTIONS.forEach(function (prop) {\n      if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {\n        opts.wsOptions[prop] = opts[prop]\n      }\n    })\n  }\n}\n\nfunction createWebSocket (client, opts) {\n  debug('createWebSocket')\n  var websocketSubProtocol =\n    (opts.protocolId === 'MQIsdp') && (opts.protocolVersion === 3)\n      ? 'mqttv3.1'\n      : 'mqtt'\n\n  setDefaultOpts(opts)\n  var url = buildUrl(opts, client)\n  debug('url %s protocol %s', url, websocketSubProtocol)\n  return websocket(url, [websocketSubProtocol], opts.wsOptions)\n}\n\nfunction streamBuilder (client, opts) {\n  return createWebSocket(client, opts)\n}\n\nfunction browserStreamBuilder (client, opts) {\n  debug('browserStreamBuilder')\n  if (!opts.hostname) {\n    opts.hostname = opts.host\n  }\n\n  if (!opts.hostname) {\n    // Throwing an error in a Web Worker if no `hostname` is given, because we\n    // can not determine the `hostname` automatically.  If connecting to\n    // localhost, please supply the `hostname` as an argument.\n    if (typeof (document) === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.')\n    }\n    var parsed = urlModule.parse(document.URL)\n    opts.hostname = parsed.hostname\n\n    if (!opts.port) {\n      opts.port = parsed.port\n    }\n  }\n  return createWebSocket(client, opts)\n}\n\nif (IS_BROWSER) {\n  module.exports = browserStreamBuilder\n} else {\n  module.exports = streamBuilder\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC;AACzC,IAAIC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC3C,IAAIE,SAAS,GAAGF,OAAO,CAAC,KAAK,CAAC;AAC9B,IAAIG,WAAW,GAAG,CAChB,oBAAoB,EACpB,IAAI,EACJ,MAAM,EACN,KAAK,EACL,KAAK,EACL,YAAY,CACb;AACD,IAAIC,UAAU,GAAGC,OAAO,CAACC,KAAK,KAAK,SAAS;AAE5C,SAASC,QAAQA,CAAEC,IAAI,EAAEC,MAAM,EAAE;EAC/B,IAAIC,GAAG,GAAGF,IAAI,CAACG,QAAQ,GAAG,KAAK,GAAGH,IAAI,CAACI,QAAQ,GAAG,GAAG,GAAGJ,IAAI,CAACK,IAAI,GAAGL,IAAI,CAACM,IAAI;EAC7E,IAAI,OAAQN,IAAI,CAACO,cAAe,KAAK,UAAU,EAAE;IAC/CL,GAAG,GAAGF,IAAI,CAACO,cAAc,CAACL,GAAG,EAAEF,IAAI,EAAEC,MAAM,CAAC;EAC9C;EACA,OAAOC,GAAG;AACZ;AAEA,SAASM,cAAcA,CAAER,IAAI,EAAE;EAC7B,IAAI,CAACA,IAAI,CAACI,QAAQ,EAAE;IAClBJ,IAAI,CAACI,QAAQ,GAAG,WAAW;EAC7B;EACA,IAAI,CAACJ,IAAI,CAACK,IAAI,EAAE;IACd,IAAIL,IAAI,CAACG,QAAQ,KAAK,KAAK,EAAE;MAC3BH,IAAI,CAACK,IAAI,GAAG,GAAG;IACjB,CAAC,MAAM;MACLL,IAAI,CAACK,IAAI,GAAG,EAAE;IAChB;EACF;EACA,IAAI,CAACL,IAAI,CAACM,IAAI,EAAE;IACdN,IAAI,CAACM,IAAI,GAAG,GAAG;EACjB;EAEA,IAAI,CAACN,IAAI,CAACS,SAAS,EAAE;IACnBT,IAAI,CAACS,SAAS,GAAG,CAAC,CAAC;EACrB;EACA,IAAI,CAACb,UAAU,IAAII,IAAI,CAACG,QAAQ,KAAK,KAAK,EAAE;IAC1C;IACAR,WAAW,CAACe,OAAO,CAAC,UAAUC,IAAI,EAAE;MAClC,IAAIX,IAAI,CAACY,cAAc,CAACD,IAAI,CAAC,IAAI,CAACX,IAAI,CAACS,SAAS,CAACG,cAAc,CAACD,IAAI,CAAC,EAAE;QACrEX,IAAI,CAACS,SAAS,CAACE,IAAI,CAAC,GAAGX,IAAI,CAACW,IAAI,CAAC;MACnC;IACF,CAAC,CAAC;EACJ;AACF;AAEA,SAASE,eAAeA,CAAEZ,MAAM,EAAED,IAAI,EAAE;EACtCT,KAAK,CAAC,iBAAiB,CAAC;EACxB,IAAIuB,oBAAoB,GACrBd,IAAI,CAACe,UAAU,KAAK,QAAQ,IAAMf,IAAI,CAACgB,eAAe,KAAK,CAAE,GAC1D,UAAU,GACV,MAAM;EAEZR,cAAc,CAACR,IAAI,CAAC;EACpB,IAAIE,GAAG,GAAGH,QAAQ,CAACC,IAAI,EAAEC,MAAM,CAAC;EAChCV,KAAK,CAAC,oBAAoB,EAAEW,GAAG,EAAEY,oBAAoB,CAAC;EACtD,OAAOrB,SAAS,CAACS,GAAG,EAAE,CAACY,oBAAoB,CAAC,EAAEd,IAAI,CAACS,SAAS,CAAC;AAC/D;AAEA,SAASQ,aAAaA,CAAEhB,MAAM,EAAED,IAAI,EAAE;EACpC,OAAOa,eAAe,CAACZ,MAAM,EAAED,IAAI,CAAC;AACtC;AAEA,SAASkB,oBAAoBA,CAAEjB,MAAM,EAAED,IAAI,EAAE;EAC3CT,KAAK,CAAC,sBAAsB,CAAC;EAC7B,IAAI,CAACS,IAAI,CAACI,QAAQ,EAAE;IAClBJ,IAAI,CAACI,QAAQ,GAAGJ,IAAI,CAACmB,IAAI;EAC3B;EAEA,IAAI,CAACnB,IAAI,CAACI,QAAQ,EAAE;IAClB;IACA;IACA;IACA,IAAI,OAAQgB,QAAS,KAAK,WAAW,EAAE;MACrC,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;IACrE;IACA,IAAIC,MAAM,GAAG5B,SAAS,CAAC6B,KAAK,CAACH,QAAQ,CAACI,GAAG,CAAC;IAC1CxB,IAAI,CAACI,QAAQ,GAAGkB,MAAM,CAAClB,QAAQ;IAE/B,IAAI,CAACJ,IAAI,CAACK,IAAI,EAAE;MACdL,IAAI,CAACK,IAAI,GAAGiB,MAAM,CAACjB,IAAI;IACzB;EACF;EACA,OAAOQ,eAAe,CAACZ,MAAM,EAAED,IAAI,CAAC;AACtC;AAEA,IAAIJ,UAAU,EAAE;EACd6B,MAAM,CAACC,OAAO,GAAGR,oBAAoB;AACvC,CAAC,MAAM;EACLO,MAAM,CAACC,OAAO,GAAGT,aAAa;AAChC"},"metadata":{},"sourceType":"script","externalDependencies":[]}