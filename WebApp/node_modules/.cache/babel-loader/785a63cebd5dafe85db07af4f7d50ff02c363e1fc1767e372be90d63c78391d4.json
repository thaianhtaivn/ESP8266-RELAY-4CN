{"ast":null,"code":"define([\"../core\", \"../core/isAttached\", \"./var/rboxStyle\", \"./var/rnumnonpx\", \"./var/getStyles\", \"./var/rcustomProp\", \"../var/rtrimCSS\", \"./support\"], function (jQuery, isAttached, rboxStyle, rnumnonpx, getStyles, rcustomProp, rtrimCSS, support) {\n  \"use strict\";\n\n  function curCSS(elem, name, computed) {\n    var width,\n      minWidth,\n      maxWidth,\n      ret,\n      isCustomProp = rcustomProp.test(name),\n      // Support: Firefox 51+\n      // Retrieving style before computed somehow\n      // fixes an issue with getting wrong values\n      // on detached elements\n      style = elem.style;\n    computed = computed || getStyles(elem);\n\n    // getPropertyValue is needed for:\n    //   .css('filter') (IE 9 only, trac-12537)\n    //   .css('--customProperty) (gh-3144)\n    if (computed) {\n      // Support: IE <=9 - 11+\n      // IE only supports `\"float\"` in `getPropertyValue`; in computed styles\n      // it's only available as `\"cssFloat\"`. We no longer modify properties\n      // sent to `.css()` apart from camelCasing, so we need to check both.\n      // Normally, this would create difference in behavior: if\n      // `getPropertyValue` returns an empty string, the value returned\n      // by `.css()` would be `undefined`. This is usually the case for\n      // disconnected elements. However, in IE even disconnected elements\n      // with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\n      ret = computed.getPropertyValue(name) || computed[name];\n      if (isCustomProp && ret) {\n        // Support: Firefox 105+, Chrome <=105+\n        // Spec requires trimming whitespace for custom properties (gh-4926).\n        // Firefox only trims leading whitespace. Chrome just collapses\n        // both leading & trailing whitespace to a single space.\n        //\n        // Fall back to `undefined` if empty string returned.\n        // This collapses a missing definition with property defined\n        // and set to an empty string but there's no standard API\n        // allowing us to differentiate them without a performance penalty\n        // and returning `undefined` aligns with older jQuery.\n        //\n        // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n        // as whitespace while CSS does not, but this is not a problem\n        // because CSS preprocessing replaces them with U+000A LINE FEED\n        // (which *is* CSS whitespace)\n        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n        ret = ret.replace(rtrimCSS, \"$1\") || undefined;\n      }\n      if (ret === \"\" && !isAttached(elem)) {\n        ret = jQuery.style(elem, name);\n      }\n\n      // A tribute to the \"awesome hack by Dean Edwards\"\n      // Android Browser returns percentage for some values,\n      // but width seems to be reliably pixels.\n      // This is against the CSSOM draft spec:\n      // https://drafts.csswg.org/cssom/#resolved-values\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth;\n\n        // Put in the new values to get a computed value out\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width;\n\n        // Revert the changed values\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n    return ret !== undefined ?\n    // Support: IE <=9 - 11 only\n    // IE returns zIndex value as an integer.\n    ret + \"\" : ret;\n  }\n  return curCSS;\n});","map":{"version":3,"names":["define","jQuery","isAttached","rboxStyle","rnumnonpx","getStyles","rcustomProp","rtrimCSS","support","curCSS","elem","name","computed","width","minWidth","maxWidth","ret","isCustomProp","test","style","getPropertyValue","replace","undefined","pixelBoxStyles"],"sources":["/Users/thaitai/Desktop/Work/IoT/relay-web-app/node_modules/jquery/src/css/curCSS.js"],"sourcesContent":["define( [\n\t\"../core\",\n\t\"../core/isAttached\",\n\t\"./var/rboxStyle\",\n\t\"./var/rnumnonpx\",\n\t\"./var/getStyles\",\n\t\"./var/rcustomProp\",\n\t\"../var/rtrimCSS\",\n\t\"./support\"\n], function( jQuery, isAttached, rboxStyle, rnumnonpx, getStyles,\n\trcustomProp, rtrimCSS, support ) {\n\n\"use strict\";\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\n\t\t// Support: IE <=9 - 11+\n\t\t// IE only supports `\"float\"` in `getPropertyValue`; in computed styles\n\t\t// it's only available as `\"cssFloat\"`. We no longer modify properties\n\t\t// sent to `.css()` apart from camelCasing, so we need to check both.\n\t\t// Normally, this would create difference in behavior: if\n\t\t// `getPropertyValue` returns an empty string, the value returned\n\t\t// by `.css()` would be `undefined`. This is usually the case for\n\t\t// disconnected elements. However, in IE even disconnected elements\n\t\t// with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( isCustomProp && ret ) {\n\n\t\t\t// Support: Firefox 105+, Chrome <=105+\n\t\t\t// Spec requires trimming whitespace for custom properties (gh-4926).\n\t\t\t// Firefox only trims leading whitespace. Chrome just collapses\n\t\t\t// both leading & trailing whitespace to a single space.\n\t\t\t//\n\t\t\t// Fall back to `undefined` if empty string returned.\n\t\t\t// This collapses a missing definition with property defined\n\t\t\t// and set to an empty string but there's no standard API\n\t\t\t// allowing us to differentiate them without a performance penalty\n\t\t\t// and returning `undefined` aligns with older jQuery.\n\t\t\t//\n\t\t\t// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" ) || undefined;\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\nreturn curCSS;\n} );\n"],"mappings":"AAAAA,MAAM,CAAE,CACP,SAAS,EACT,oBAAoB,EACpB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,mBAAmB,EACnB,iBAAiB,EACjB,WAAW,CACX,EAAE,UAAUC,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAC/DC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,EAAG;EAElC,YAAY;;EAEZ,SAASC,MAAMA,CAAEC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAG;IACvC,IAAIC,KAAK;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,GAAG;MACjCC,YAAY,GAAGX,WAAW,CAACY,IAAI,CAAEP,IAAI,CAAE;MAEvC;MACA;MACA;MACA;MACAQ,KAAK,GAAGT,IAAI,CAACS,KAAK;IAEnBP,QAAQ,GAAGA,QAAQ,IAAIP,SAAS,CAAEK,IAAI,CAAE;;IAExC;IACA;IACA;IACA,IAAKE,QAAQ,EAAG;MAEf;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAI,GAAG,GAAGJ,QAAQ,CAACQ,gBAAgB,CAAET,IAAI,CAAE,IAAIC,QAAQ,CAAED,IAAI,CAAE;MAE3D,IAAKM,YAAY,IAAID,GAAG,EAAG;QAE1B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAA,GAAG,GAAGA,GAAG,CAACK,OAAO,CAAEd,QAAQ,EAAE,IAAI,CAAE,IAAIe,SAAS;MACjD;MAEA,IAAKN,GAAG,KAAK,EAAE,IAAI,CAACd,UAAU,CAAEQ,IAAI,CAAE,EAAG;QACxCM,GAAG,GAAGf,MAAM,CAACkB,KAAK,CAAET,IAAI,EAAEC,IAAI,CAAE;MACjC;;MAEA;MACA;MACA;MACA;MACA;MACA,IAAK,CAACH,OAAO,CAACe,cAAc,EAAE,IAAInB,SAAS,CAACc,IAAI,CAAEF,GAAG,CAAE,IAAIb,SAAS,CAACe,IAAI,CAAEP,IAAI,CAAE,EAAG;QAEnF;QACAE,KAAK,GAAGM,KAAK,CAACN,KAAK;QACnBC,QAAQ,GAAGK,KAAK,CAACL,QAAQ;QACzBC,QAAQ,GAAGI,KAAK,CAACJ,QAAQ;;QAEzB;QACAI,KAAK,CAACL,QAAQ,GAAGK,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACN,KAAK,GAAGG,GAAG;QACnDA,GAAG,GAAGJ,QAAQ,CAACC,KAAK;;QAEpB;QACAM,KAAK,CAACN,KAAK,GAAGA,KAAK;QACnBM,KAAK,CAACL,QAAQ,GAAGA,QAAQ;QACzBK,KAAK,CAACJ,QAAQ,GAAGA,QAAQ;MAC1B;IACD;IAEA,OAAOC,GAAG,KAAKM,SAAS;IAEvB;IACA;IACAN,GAAG,GAAG,EAAE,GACRA,GAAG;EACL;EAEA,OAAOP,MAAM;AACb,CAAC,CAAE"},"metadata":{},"sourceType":"script","externalDependencies":[]}